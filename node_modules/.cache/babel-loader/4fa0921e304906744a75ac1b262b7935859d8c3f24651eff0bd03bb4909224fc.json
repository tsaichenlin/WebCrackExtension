{"ast":null,"code":"import { ChatOpenAI } from \"../chat_models.js\";\nexport class AzureChatOpenAI extends ChatOpenAI {\n  _llmType() {\n    return \"azure_openai\";\n  }\n  get lc_aliases() {\n    return {\n      openAIApiKey: \"openai_api_key\",\n      openAIApiVersion: \"openai_api_version\",\n      openAIBasePath: \"openai_api_base\"\n    };\n  }\n  constructor(fields) {\n    var _fields$openAIBasePat;\n    // assume the base URL does not contain \"openai\" nor \"deployments\" prefix\n    let basePath = (_fields$openAIBasePat = fields === null || fields === void 0 ? void 0 : fields.openAIBasePath) !== null && _fields$openAIBasePat !== void 0 ? _fields$openAIBasePat : \"\";\n    if (!basePath.endsWith(\"/\")) basePath += \"/\";\n    if (!basePath.endsWith(\"openai/deployments\")) basePath += \"openai/deployments\";\n    const newFields = fields ? {\n      ...fields\n    } : fields;\n    if (newFields) {\n      newFields.azureOpenAIBasePath = basePath;\n      newFields.azureOpenAIApiDeploymentName = newFields.deploymentName;\n      newFields.azureOpenAIApiKey = newFields.openAIApiKey;\n      newFields.azureOpenAIApiVersion = newFields.openAIApiVersion;\n    }\n    super(newFields);\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  toJSON() {\n    const json = super.toJSON();\n    function isRecord(obj) {\n      return typeof obj === \"object\" && obj != null;\n    }\n    if (isRecord(json) && isRecord(json.kwargs)) {\n      delete json.kwargs.azure_openai_base_path;\n      delete json.kwargs.azure_openai_api_deployment_name;\n      delete json.kwargs.azure_openai_api_key;\n      delete json.kwargs.azure_openai_api_version;\n      delete json.kwargs.azure_open_ai_base_path;\n    }\n    return json;\n  }\n}","map":{"version":3,"names":["ChatOpenAI","AzureChatOpenAI","_llmType","lc_aliases","openAIApiKey","openAIApiVersion","openAIBasePath","constructor","fields","_fields$openAIBasePat","basePath","endsWith","newFields","azureOpenAIBasePath","azureOpenAIApiDeploymentName","deploymentName","azureOpenAIApiKey","azureOpenAIApiVersion","toJSON","json","isRecord","obj","kwargs","azure_openai_base_path","azure_openai_api_deployment_name","azure_openai_api_key","azure_openai_api_version","azure_open_ai_base_path"],"sources":["/Users/mandylin/Desktop/WebCrack React/webcrack/node_modules/@langchain/openai/dist/azure/chat_models.js"],"sourcesContent":["import { ChatOpenAI } from \"../chat_models.js\";\nexport class AzureChatOpenAI extends ChatOpenAI {\n    _llmType() {\n        return \"azure_openai\";\n    }\n    get lc_aliases() {\n        return {\n            openAIApiKey: \"openai_api_key\",\n            openAIApiVersion: \"openai_api_version\",\n            openAIBasePath: \"openai_api_base\",\n        };\n    }\n    constructor(fields) {\n        // assume the base URL does not contain \"openai\" nor \"deployments\" prefix\n        let basePath = fields?.openAIBasePath ?? \"\";\n        if (!basePath.endsWith(\"/\"))\n            basePath += \"/\";\n        if (!basePath.endsWith(\"openai/deployments\"))\n            basePath += \"openai/deployments\";\n        const newFields = fields ? { ...fields } : fields;\n        if (newFields) {\n            newFields.azureOpenAIBasePath = basePath;\n            newFields.azureOpenAIApiDeploymentName = newFields.deploymentName;\n            newFields.azureOpenAIApiKey = newFields.openAIApiKey;\n            newFields.azureOpenAIApiVersion = newFields.openAIApiVersion;\n        }\n        super(newFields);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    toJSON() {\n        const json = super.toJSON();\n        function isRecord(obj) {\n            return typeof obj === \"object\" && obj != null;\n        }\n        if (isRecord(json) && isRecord(json.kwargs)) {\n            delete json.kwargs.azure_openai_base_path;\n            delete json.kwargs.azure_openai_api_deployment_name;\n            delete json.kwargs.azure_openai_api_key;\n            delete json.kwargs.azure_openai_api_version;\n            delete json.kwargs.azure_open_ai_base_path;\n        }\n        return json;\n    }\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,mBAAmB;AAC9C,OAAO,MAAMC,eAAe,SAASD,UAAU,CAAC;EAC5CE,QAAQA,CAAA,EAAG;IACP,OAAO,cAAc;EACzB;EACA,IAAIC,UAAUA,CAAA,EAAG;IACb,OAAO;MACHC,YAAY,EAAE,gBAAgB;MAC9BC,gBAAgB,EAAE,oBAAoB;MACtCC,cAAc,EAAE;IACpB,CAAC;EACL;EACAC,WAAWA,CAACC,MAAM,EAAE;IAAA,IAAAC,qBAAA;IAChB;IACA,IAAIC,QAAQ,IAAAD,qBAAA,GAAGD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEF,cAAc,cAAAG,qBAAA,cAAAA,qBAAA,GAAI,EAAE;IAC3C,IAAI,CAACC,QAAQ,CAACC,QAAQ,CAAC,GAAG,CAAC,EACvBD,QAAQ,IAAI,GAAG;IACnB,IAAI,CAACA,QAAQ,CAACC,QAAQ,CAAC,oBAAoB,CAAC,EACxCD,QAAQ,IAAI,oBAAoB;IACpC,MAAME,SAAS,GAAGJ,MAAM,GAAG;MAAE,GAAGA;IAAO,CAAC,GAAGA,MAAM;IACjD,IAAII,SAAS,EAAE;MACXA,SAAS,CAACC,mBAAmB,GAAGH,QAAQ;MACxCE,SAAS,CAACE,4BAA4B,GAAGF,SAAS,CAACG,cAAc;MACjEH,SAAS,CAACI,iBAAiB,GAAGJ,SAAS,CAACR,YAAY;MACpDQ,SAAS,CAACK,qBAAqB,GAAGL,SAAS,CAACP,gBAAgB;IAChE;IACA,KAAK,CAACO,SAAS,CAAC;EACpB;EACA;EACAM,MAAMA,CAAA,EAAG;IACL,MAAMC,IAAI,GAAG,KAAK,CAACD,MAAM,CAAC,CAAC;IAC3B,SAASE,QAAQA,CAACC,GAAG,EAAE;MACnB,OAAO,OAAOA,GAAG,KAAK,QAAQ,IAAIA,GAAG,IAAI,IAAI;IACjD;IACA,IAAID,QAAQ,CAACD,IAAI,CAAC,IAAIC,QAAQ,CAACD,IAAI,CAACG,MAAM,CAAC,EAAE;MACzC,OAAOH,IAAI,CAACG,MAAM,CAACC,sBAAsB;MACzC,OAAOJ,IAAI,CAACG,MAAM,CAACE,gCAAgC;MACnD,OAAOL,IAAI,CAACG,MAAM,CAACG,oBAAoB;MACvC,OAAON,IAAI,CAACG,MAAM,CAACI,wBAAwB;MAC3C,OAAOP,IAAI,CAACG,MAAM,CAACK,uBAAuB;IAC9C;IACA,OAAOR,IAAI;EACf;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}