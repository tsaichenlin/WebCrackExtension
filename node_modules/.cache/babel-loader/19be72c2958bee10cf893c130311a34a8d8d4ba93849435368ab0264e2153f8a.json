{"ast":null,"code":"import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nconst STATUS_NO_RETRY = [400, 401, 402, 403, 404, 405, 406, 407, 408, 409 // Conflict\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultFailedAttemptHandler = error => {\n  var _error$response$statu, _error$response, _error$error;\n  if (error.message.startsWith(\"Cancel\") || error.message.startsWith(\"TimeoutError\") || error.name === \"TimeoutError\" || error.message.startsWith(\"AbortError\") || error.name === \"AbortError\") {\n    throw error;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if ((error === null || error === void 0 ? void 0 : error.code) === \"ECONNABORTED\") {\n    throw error;\n  }\n  const status = // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (_error$response$statu = error === null || error === void 0 || (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) !== null && _error$response$statu !== void 0 ? _error$response$statu : error === null || error === void 0 ? void 0 : error.status;\n  if (status && STATUS_NO_RETRY.includes(+status)) {\n    throw error;\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  if ((error === null || error === void 0 || (_error$error = error.error) === null || _error$error === void 0 ? void 0 : _error$error.code) === \"insufficient_quota\") {\n    const err = new Error(error === null || error === void 0 ? void 0 : error.message);\n    err.name = \"InsufficientQuotaError\";\n    throw err;\n  }\n};\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n  constructor(params) {\n    var _params$maxConcurrenc, _params$maxRetries, _params$onFailedAttem;\n    Object.defineProperty(this, \"maxConcurrency\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"maxRetries\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"onFailedAttempt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"queue\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.maxConcurrency = (_params$maxConcurrenc = params.maxConcurrency) !== null && _params$maxConcurrenc !== void 0 ? _params$maxConcurrenc : Infinity;\n    this.maxRetries = (_params$maxRetries = params.maxRetries) !== null && _params$maxRetries !== void 0 ? _params$maxRetries : 6;\n    this.onFailedAttempt = (_params$onFailedAttem = params.onFailedAttempt) !== null && _params$onFailedAttem !== void 0 ? _params$onFailedAttem : defaultFailedAttemptHandler;\n    const PQueue = \"default\" in PQueueMod ? PQueueMod.default : PQueueMod;\n    this.queue = new PQueue({\n      concurrency: this.maxConcurrency\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  call(callable) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    return this.queue.add(() => pRetry(() => callable(...args).catch(error => {\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      if (error instanceof Error) {\n        throw error;\n      } else {\n        throw new Error(error);\n      }\n    }), {\n      onFailedAttempt: this.onFailedAttempt,\n      retries: this.maxRetries,\n      randomize: true\n      // If needed we can change some of the defaults here,\n      // but they're quite sensible.\n    }), {\n      throwOnTimeout: true\n    });\n  }\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callWithOptions(options, callable) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n    // Note this doesn't cancel the underlying request,\n    // when available prefer to use the signal option of the underlying call\n    if (options.signal) {\n      return Promise.race([this.call(callable, ...args), new Promise((_, reject) => {\n        var _options$signal;\n        (_options$signal = options.signal) === null || _options$signal === void 0 || _options$signal.addEventListener(\"abort\", () => {\n          reject(new Error(\"AbortError\"));\n        });\n      })]);\n    }\n    return this.call(callable, ...args);\n  }\n  fetch() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    return this.call(() => fetch(...args).then(res => res.ok ? res : Promise.reject(res)));\n  }\n}","map":{"version":3,"names":["pRetry","PQueueMod","STATUS_NO_RETRY","defaultFailedAttemptHandler","error","_error$response$statu","_error$response","_error$error","message","startsWith","name","code","status","response","includes","err","Error","AsyncCaller","constructor","params","_params$maxConcurrenc","_params$maxRetries","_params$onFailedAttem","Object","defineProperty","enumerable","configurable","writable","value","maxConcurrency","Infinity","maxRetries","onFailedAttempt","PQueue","default","queue","concurrency","call","callable","_len","arguments","length","args","Array","_key","add","catch","retries","randomize","throwOnTimeout","callWithOptions","options","_len2","_key2","signal","Promise","race","_","reject","_options$signal","addEventListener","fetch","_len3","_key3","then","res","ok"],"sources":["/Users/mandylin/Desktop/WebCrack React 2/webcrack/node_modules/@langchain/core/dist/utils/async_caller.js"],"sourcesContent":["import pRetry from \"p-retry\";\nimport PQueueMod from \"p-queue\";\nconst STATUS_NO_RETRY = [\n    400,\n    401,\n    402,\n    403,\n    404,\n    405,\n    406,\n    407,\n    408,\n    409, // Conflict\n];\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst defaultFailedAttemptHandler = (error) => {\n    if (error.message.startsWith(\"Cancel\") ||\n        error.message.startsWith(\"TimeoutError\") ||\n        error.name === \"TimeoutError\" ||\n        error.message.startsWith(\"AbortError\") ||\n        error.name === \"AbortError\") {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.code === \"ECONNABORTED\") {\n        throw error;\n    }\n    const status = \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    error?.response?.status ?? error?.status;\n    if (status && STATUS_NO_RETRY.includes(+status)) {\n        throw error;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    if (error?.error?.code === \"insufficient_quota\") {\n        const err = new Error(error?.message);\n        err.name = \"InsufficientQuotaError\";\n        throw err;\n    }\n};\n/**\n * A class that can be used to make async calls with concurrency and retry logic.\n *\n * This is useful for making calls to any kind of \"expensive\" external resource,\n * be it because it's rate-limited, subject to network issues, etc.\n *\n * Concurrent calls are limited by the `maxConcurrency` parameter, which defaults\n * to `Infinity`. This means that by default, all calls will be made in parallel.\n *\n * Retries are limited by the `maxRetries` parameter, which defaults to 6. This\n * means that by default, each call will be retried up to 6 times, with an\n * exponential backoff between each attempt.\n */\nexport class AsyncCaller {\n    constructor(params) {\n        Object.defineProperty(this, \"maxConcurrency\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"maxRetries\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"onFailedAttempt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"queue\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.maxConcurrency = params.maxConcurrency ?? Infinity;\n        this.maxRetries = params.maxRetries ?? 6;\n        this.onFailedAttempt =\n            params.onFailedAttempt ?? defaultFailedAttemptHandler;\n        const PQueue = \"default\" in PQueueMod ? PQueueMod.default : PQueueMod;\n        this.queue = new PQueue({ concurrency: this.maxConcurrency });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    call(callable, ...args) {\n        return this.queue.add(() => pRetry(() => callable(...args).catch((error) => {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (error instanceof Error) {\n                throw error;\n            }\n            else {\n                throw new Error(error);\n            }\n        }), {\n            onFailedAttempt: this.onFailedAttempt,\n            retries: this.maxRetries,\n            randomize: true,\n            // If needed we can change some of the defaults here,\n            // but they're quite sensible.\n        }), { throwOnTimeout: true });\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    callWithOptions(options, callable, ...args) {\n        // Note this doesn't cancel the underlying request,\n        // when available prefer to use the signal option of the underlying call\n        if (options.signal) {\n            return Promise.race([\n                this.call(callable, ...args),\n                new Promise((_, reject) => {\n                    options.signal?.addEventListener(\"abort\", () => {\n                        reject(new Error(\"AbortError\"));\n                    });\n                }),\n            ]);\n        }\n        return this.call(callable, ...args);\n    }\n    fetch(...args) {\n        return this.call(() => fetch(...args).then((res) => (res.ok ? res : Promise.reject(res))));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}