{"ast":null,"code":"// utils / string\n\nimport { isArray, isString, isNumber, hasProperty } from './detection.js';\nconst toString = input => {\n  const s = isNumber(input) ? String(input) : input;\n  if (!isString(s)) {\n    throw new Error('InvalidInput: String required.');\n  }\n  return s;\n};\nexport const truncate = (s, len = 140) => {\n  const txt = toString(s);\n  const txtlen = txt.length;\n  if (txtlen <= len) {\n    return txt;\n  }\n  const subtxt = txt.substring(0, len).trim();\n  const subtxtArr = subtxt.split(' ');\n  const subtxtLen = subtxtArr.length;\n  if (subtxtLen > 1) {\n    subtxtArr.pop();\n    return subtxtArr.map(word => word.trim()).join(' ') + '...';\n  }\n  return subtxt.substring(0, len - 3) + '...';\n};\nexport const stripTags = s => {\n  return toString(s).replace(/(<([^>]+)>)/ig, '').trim();\n};\nexport const escapeHTML = s => {\n  return toString(s).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\n};\nexport const unescapeHTML = s => {\n  return toString(s).replace(/&quot;/g, '\"').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');\n};\nexport const ucfirst = s => {\n  const x = toString(s).toLowerCase();\n  return x.length > 1 ? x.charAt(0).toUpperCase() + x.slice(1) : x.toUpperCase();\n};\nexport const ucwords = s => {\n  return toString(s).split(' ').map(w => {\n    return ucfirst(w);\n  }).join(' ');\n};\nexport const replaceAll = (s, alpha, beta) => {\n  let x = toString(s);\n  const a = isNumber(alpha) ? String(alpha) : alpha;\n  const b = isNumber(beta) ? String(beta) : beta;\n  if (isString(a) && isString(b)) {\n    const aa = x.split(a);\n    x = aa.join(b);\n  } else if (isArray(a) && isString(b)) {\n    a.forEach(v => {\n      x = replaceAll(x, v, b);\n    });\n  } else if (isArray(a) && isArray(b) && a.length === b.length) {\n    const k = a.length;\n    if (k > 0) {\n      for (let i = 0; i < k; i++) {\n        const aaa = a[i];\n        const bb = b[i];\n        x = replaceAll(x, aaa, bb);\n      }\n    }\n  }\n  return x;\n};\nconst getCharMap = () => {\n  const lmap = {\n    a: 'á|à|ả|ã|ạ|ă|ắ|ặ|ằ|ẳ|ẵ|â|ấ|ầ|ẩ|ẫ|ậ|ä|æ',\n    c: 'ç',\n    d: 'đ|ð',\n    e: 'é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ|ë',\n    i: 'í|ì|ỉ|ĩ|ị|ï|î',\n    n: 'ñ',\n    o: 'ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ|ö|ø',\n    s: 'ß',\n    u: 'ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự|û',\n    y: 'ý|ỳ|ỷ|ỹ|ỵ|ÿ'\n  };\n  const map = {\n    ...lmap\n  };\n  Object.keys(lmap).forEach(k => {\n    const K = k.toUpperCase();\n    map[K] = lmap[k].toUpperCase();\n  });\n  return map;\n};\nexport const stripAccent = s => {\n  let x = toString(s);\n  const updateS = (ai, key) => {\n    x = replaceAll(x, ai, key);\n  };\n  const map = getCharMap();\n  for (const key in map) {\n    if (hasProperty(map, key)) {\n      const a = map[key].split('|');\n      a.forEach(item => {\n        return updateS(item, key);\n      });\n    }\n  }\n  return x;\n};\nexport const slugify = (s, delimiter = '-') => {\n  return stripAccent(s).trim().toLowerCase().replace(/\\W+/g, ' ').replace(/\\s+/g, ' ').replace(/\\s/g, delimiter);\n};","map":{"version":3,"names":["isArray","isString","isNumber","hasProperty","toString","input","s","String","Error","truncate","len","txt","txtlen","length","subtxt","substring","trim","subtxtArr","split","subtxtLen","pop","map","word","join","stripTags","replace","escapeHTML","unescapeHTML","ucfirst","x","toLowerCase","charAt","toUpperCase","slice","ucwords","w","replaceAll","alpha","beta","a","b","aa","forEach","v","k","i","aaa","bb","getCharMap","lmap","c","d","e","n","o","u","y","Object","keys","K","stripAccent","updateS","ai","key","item","slugify","delimiter"],"sources":["/Users/mandylin/Desktop/WebCrack React/webcrack/node_modules/bellajs/src/utils/string.js"],"sourcesContent":["// utils / string\n\nimport {\n  isArray,\n  isString,\n  isNumber,\n  hasProperty\n} from './detection.js'\n\nconst toString = (input) => {\n  const s = isNumber(input) ? String(input) : input\n  if (!isString(s)) {\n    throw new Error('InvalidInput: String required.')\n  }\n  return s\n}\n\nexport const truncate = (s, len = 140) => {\n  const txt = toString(s)\n  const txtlen = txt.length\n  if (txtlen <= len) {\n    return txt\n  }\n  const subtxt = txt.substring(0, len).trim()\n  const subtxtArr = subtxt.split(' ')\n  const subtxtLen = subtxtArr.length\n  if (subtxtLen > 1) {\n    subtxtArr.pop()\n    return subtxtArr.map(word => word.trim()).join(' ') + '...'\n  }\n  return subtxt.substring(0, len - 3) + '...'\n}\n\nexport const stripTags = (s) => {\n  return toString(s).replace(/(<([^>]+)>)/ig, '').trim()\n}\n\nexport const escapeHTML = (s) => {\n  return toString(s)\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n}\n\nexport const unescapeHTML = (s) => {\n  return toString(s)\n    .replace(/&quot;/g, '\"')\n    .replace(/&lt;/g, '<')\n    .replace(/&gt;/g, '>')\n    .replace(/&amp;/g, '&')\n}\n\nexport const ucfirst = (s) => {\n  const x = toString(s).toLowerCase()\n  return x.length > 1 ? x.charAt(0).toUpperCase() + x.slice(1) : x.toUpperCase()\n}\n\nexport const ucwords = (s) => {\n  return toString(s).split(' ').map((w) => {\n    return ucfirst(w)\n  }).join(' ')\n}\n\nexport const replaceAll = (s, alpha, beta) => {\n  let x = toString(s)\n  const a = isNumber(alpha) ? String(alpha) : alpha\n  const b = isNumber(beta) ? String(beta) : beta\n\n  if (isString(a) && isString(b)) {\n    const aa = x.split(a)\n    x = aa.join(b)\n  } else if (isArray(a) && isString(b)) {\n    a.forEach((v) => {\n      x = replaceAll(x, v, b)\n    })\n  } else if (isArray(a) && isArray(b) && a.length === b.length) {\n    const k = a.length\n    if (k > 0) {\n      for (let i = 0; i < k; i++) {\n        const aaa = a[i]\n        const bb = b[i]\n        x = replaceAll(x, aaa, bb)\n      }\n    }\n  }\n  return x\n}\n\nconst getCharMap = () => {\n  const lmap = {\n    a: 'á|à|ả|ã|ạ|ă|ắ|ặ|ằ|ẳ|ẵ|â|ấ|ầ|ẩ|ẫ|ậ|ä|æ',\n    c: 'ç',\n    d: 'đ|ð',\n    e: 'é|è|ẻ|ẽ|ẹ|ê|ế|ề|ể|ễ|ệ|ë',\n    i: 'í|ì|ỉ|ĩ|ị|ï|î',\n    n: 'ñ',\n    o: 'ó|ò|ỏ|õ|ọ|ô|ố|ồ|ổ|ỗ|ộ|ơ|ớ|ờ|ở|ỡ|ợ|ö|ø',\n    s: 'ß',\n    u: 'ú|ù|ủ|ũ|ụ|ư|ứ|ừ|ử|ữ|ự|û',\n    y: 'ý|ỳ|ỷ|ỹ|ỵ|ÿ',\n  }\n\n  const map = {\n    ...lmap,\n  }\n  Object.keys(lmap).forEach((k) => {\n    const K = k.toUpperCase()\n    map[K] = lmap[k].toUpperCase()\n  })\n\n  return map\n}\n\nexport const stripAccent = (s) => {\n  let x = toString(s)\n\n  const updateS = (ai, key) => {\n    x = replaceAll(x, ai, key)\n  }\n\n  const map = getCharMap()\n  for (const key in map) {\n    if (hasProperty(map, key)) {\n      const a = map[key].split('|')\n      a.forEach((item) => {\n        return updateS(item, key)\n      })\n    }\n  }\n  return x\n}\n\nexport const slugify = (s, delimiter = '-') => {\n  return stripAccent(s)\n    .trim()\n    .toLowerCase()\n    .replace(/\\W+/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .replace(/\\s/g, delimiter)\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}