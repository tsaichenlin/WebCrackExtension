{"ast":null,"code":"// utils/extractWithReadability\n\nimport { Readability } from '@mozilla/readability';\nimport { DOMParser } from 'linkedom';\nimport { isString } from 'bellajs';\nexport default (function (html) {\n  var _reader$parse;\n  let url = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  if (!isString(html)) {\n    return null;\n  }\n  const doc = new DOMParser().parseFromString(html, 'text/html');\n  const base = doc.createElement('base');\n  base.setAttribute('href', url);\n  doc.head.appendChild(base);\n  const reader = new Readability(doc, {\n    keepClasses: true\n  });\n  const result = (_reader$parse = reader.parse()) !== null && _reader$parse !== void 0 ? _reader$parse : {};\n  return result.textContent ? result.content : null;\n});\nexport function extractTitleWithReadability(html) {\n  if (!isString(html)) {\n    return null;\n  }\n  const doc = new DOMParser().parseFromString(html, 'text/html');\n  const reader = new Readability(doc);\n  return reader._getArticleTitle() || null;\n}","map":{"version":3,"names":["Readability","DOMParser","isString","html","_reader$parse","url","arguments","length","undefined","doc","parseFromString","base","createElement","setAttribute","head","appendChild","reader","keepClasses","result","parse","textContent","content","extractTitleWithReadability","_getArticleTitle"],"sources":["/Users/mandylin/Desktop/WebCrack React 2/webcrack/node_modules/@extractus/article-extractor/src/utils/extractWithReadability.js"],"sourcesContent":["// utils/extractWithReadability\n\nimport { Readability } from '@mozilla/readability'\nimport { DOMParser } from 'linkedom'\nimport { isString } from 'bellajs'\n\nexport default (html, url = '') => {\n  if (!isString(html)) {\n    return null\n  }\n  const doc = new DOMParser().parseFromString(html, 'text/html')\n  const base = doc.createElement('base')\n  base.setAttribute('href', url)\n  doc.head.appendChild(base)\n  const reader = new Readability(doc, {\n    keepClasses: true,\n  })\n  const result = reader.parse() ?? {}\n  return result.textContent ? result.content : null\n}\n\nexport function extractTitleWithReadability (html) {\n  if (!isString(html)) {\n    return null\n  }\n  const doc = new DOMParser().parseFromString(html, 'text/html')\n  const reader = new Readability(doc)\n  return reader._getArticleTitle() || null\n}\n"],"mappings":"AAAA;;AAEA,SAASA,WAAW,QAAQ,sBAAsB;AAClD,SAASC,SAAS,QAAQ,UAAU;AACpC,SAASC,QAAQ,QAAQ,SAAS;AAElC,gBAAe,UAACC,IAAI,EAAe;EAAA,IAAAC,aAAA;EAAA,IAAbC,GAAG,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EAC5B,IAAI,CAACJ,QAAQ,CAACC,IAAI,CAAC,EAAE;IACnB,OAAO,IAAI;EACb;EACA,MAAMM,GAAG,GAAG,IAAIR,SAAS,CAAC,CAAC,CAACS,eAAe,CAACP,IAAI,EAAE,WAAW,CAAC;EAC9D,MAAMQ,IAAI,GAAGF,GAAG,CAACG,aAAa,CAAC,MAAM,CAAC;EACtCD,IAAI,CAACE,YAAY,CAAC,MAAM,EAAER,GAAG,CAAC;EAC9BI,GAAG,CAACK,IAAI,CAACC,WAAW,CAACJ,IAAI,CAAC;EAC1B,MAAMK,MAAM,GAAG,IAAIhB,WAAW,CAACS,GAAG,EAAE;IAClCQ,WAAW,EAAE;EACf,CAAC,CAAC;EACF,MAAMC,MAAM,IAAAd,aAAA,GAAGY,MAAM,CAACG,KAAK,CAAC,CAAC,cAAAf,aAAA,cAAAA,aAAA,GAAI,CAAC,CAAC;EACnC,OAAOc,MAAM,CAACE,WAAW,GAAGF,MAAM,CAACG,OAAO,GAAG,IAAI;AACnD,CAAC;AAED,OAAO,SAASC,2BAA2BA,CAAEnB,IAAI,EAAE;EACjD,IAAI,CAACD,QAAQ,CAACC,IAAI,CAAC,EAAE;IACnB,OAAO,IAAI;EACb;EACA,MAAMM,GAAG,GAAG,IAAIR,SAAS,CAAC,CAAC,CAACS,eAAe,CAACP,IAAI,EAAE,WAAW,CAAC;EAC9D,MAAMa,MAAM,GAAG,IAAIhB,WAAW,CAACS,GAAG,CAAC;EACnC,OAAOO,MAAM,CAACO,gBAAgB,CAAC,CAAC,IAAI,IAAI;AAC1C"},"metadata":{},"sourceType":"module","externalDependencies":[]}