{"ast":null,"code":"import { OpenAI as OpenAIClient } from \"openai\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { Embeddings } from \"@langchain/core/embeddings\";\nimport { chunkArray } from \"@langchain/core/utils/chunk_array\";\nimport { getEndpoint } from \"./utils/azure.js\";\nimport { wrapOpenAIClientError } from \"./utils/openai.js\";\n/**\n * Class for generating embeddings using the OpenAI API. Extends the\n * Embeddings class and implements OpenAIEmbeddingsParams and\n * AzureOpenAIInput.\n * @example\n * ```typescript\n * // Embed a query using OpenAIEmbeddings to generate embeddings for a given text\n * const model = new OpenAIEmbeddings();\n * const res = await model.embedQuery(\n *   \"What would be a good company name for a company that makes colorful socks?\",\n * );\n * console.log({ res });\n *\n * ```\n */\nexport class OpenAIEmbeddings extends Embeddings {\n  constructor(fields, configuration) {\n    const fieldsWithDefaults = {\n      maxConcurrency: 2,\n      ...fields\n    };\n    super(fieldsWithDefaults);\n    Object.defineProperty(this, \"modelName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"text-embedding-ada-002\"\n    });\n    Object.defineProperty(this, \"batchSize\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 512\n    });\n    // TODO: Update to `false` on next minor release (see: https://github.com/langchain-ai/langchainjs/pull/3612)\n    Object.defineProperty(this, \"stripNewLines\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    /**\n     * The number of dimensions the resulting output embeddings should have.\n     * Only supported in `text-embedding-3` and later models.\n     */\n    Object.defineProperty(this, \"dimensions\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"timeout\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIBasePath\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"organization\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"client\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"clientConfig\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    let apiKey = fieldsWithDefaults?.openAIApiKey ?? getEnvironmentVariable(\"OPENAI_API_KEY\");\n    const azureApiKey = fieldsWithDefaults?.azureOpenAIApiKey ?? getEnvironmentVariable(\"AZURE_OPENAI_API_KEY\");\n    if (!azureApiKey && !apiKey) {\n      throw new Error(\"OpenAI or Azure OpenAI API key not found\");\n    }\n    const azureApiInstanceName = fieldsWithDefaults?.azureOpenAIApiInstanceName ?? getEnvironmentVariable(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n    const azureApiDeploymentName = (fieldsWithDefaults?.azureOpenAIApiEmbeddingsDeploymentName || fieldsWithDefaults?.azureOpenAIApiDeploymentName) ?? (getEnvironmentVariable(\"AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME\") || getEnvironmentVariable(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n    const azureApiVersion = fieldsWithDefaults?.azureOpenAIApiVersion ?? getEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\");\n    this.azureOpenAIBasePath = fieldsWithDefaults?.azureOpenAIBasePath ?? getEnvironmentVariable(\"AZURE_OPENAI_BASE_PATH\");\n    this.organization = fieldsWithDefaults?.configuration?.organization ?? getEnvironmentVariable(\"OPENAI_ORGANIZATION\");\n    this.modelName = fieldsWithDefaults?.modelName ?? this.modelName;\n    this.batchSize = fieldsWithDefaults?.batchSize ?? (azureApiKey ? 1 : this.batchSize);\n    this.stripNewLines = fieldsWithDefaults?.stripNewLines ?? this.stripNewLines;\n    this.timeout = fieldsWithDefaults?.timeout;\n    this.dimensions = fieldsWithDefaults?.dimensions;\n    this.azureOpenAIApiVersion = azureApiVersion;\n    this.azureOpenAIApiKey = azureApiKey;\n    this.azureOpenAIApiInstanceName = azureApiInstanceName;\n    this.azureOpenAIApiDeploymentName = azureApiDeploymentName;\n    if (this.azureOpenAIApiKey) {\n      if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n        throw new Error(\"Azure OpenAI API instance name not found\");\n      }\n      if (!this.azureOpenAIApiDeploymentName) {\n        throw new Error(\"Azure OpenAI API deployment name not found\");\n      }\n      if (!this.azureOpenAIApiVersion) {\n        throw new Error(\"Azure OpenAI API version not found\");\n      }\n      apiKey = apiKey ?? \"\";\n    }\n    this.clientConfig = {\n      apiKey,\n      organization: this.organization,\n      baseURL: configuration?.basePath,\n      dangerouslyAllowBrowser: true,\n      defaultHeaders: configuration?.baseOptions?.headers,\n      defaultQuery: configuration?.baseOptions?.params,\n      ...configuration,\n      ...fields?.configuration\n    };\n  }\n  /**\n   * Method to generate embeddings for an array of documents. Splits the\n   * documents into batches and makes requests to the OpenAI API to generate\n   * embeddings.\n   * @param texts Array of documents to generate embeddings for.\n   * @returns Promise that resolves to a 2D array of embeddings for each document.\n   */\n  async embedDocuments(texts) {\n    const batches = chunkArray(this.stripNewLines ? texts.map(t => t.replace(/\\n/g, \" \")) : texts, this.batchSize);\n    const batchRequests = batches.map(batch => {\n      const params = {\n        model: this.modelName,\n        input: batch\n      };\n      if (this.dimensions) {\n        params.dimensions = this.dimensions;\n      }\n      return this.embeddingWithRetry(params);\n    });\n    const batchResponses = await Promise.all(batchRequests);\n    const embeddings = [];\n    for (let i = 0; i < batchResponses.length; i += 1) {\n      const batch = batches[i];\n      const {\n        data: batchResponse\n      } = batchResponses[i];\n      for (let j = 0; j < batch.length; j += 1) {\n        embeddings.push(batchResponse[j].embedding);\n      }\n    }\n    return embeddings;\n  }\n  /**\n   * Method to generate an embedding for a single document. Calls the\n   * embeddingWithRetry method with the document as the input.\n   * @param text Document to generate an embedding for.\n   * @returns Promise that resolves to an embedding for the document.\n   */\n  async embedQuery(text) {\n    const params = {\n      model: this.modelName,\n      input: this.stripNewLines ? text.replace(/\\n/g, \" \") : text\n    };\n    if (this.dimensions) {\n      params.dimensions = this.dimensions;\n    }\n    const {\n      data\n    } = await this.embeddingWithRetry(params);\n    return data[0].embedding;\n  }\n  /**\n   * Private method to make a request to the OpenAI API to generate\n   * embeddings. Handles the retry logic and returns the response from the\n   * API.\n   * @param request Request to send to the OpenAI API.\n   * @returns Promise that resolves to the response from the API.\n   */\n  async embeddingWithRetry(request) {\n    if (!this.client) {\n      const openAIEndpointConfig = {\n        azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n        azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n        azureOpenAIApiKey: this.azureOpenAIApiKey,\n        azureOpenAIBasePath: this.azureOpenAIBasePath,\n        baseURL: this.clientConfig.baseURL\n      };\n      const endpoint = getEndpoint(openAIEndpointConfig);\n      const params = {\n        ...this.clientConfig,\n        baseURL: endpoint,\n        timeout: this.timeout,\n        maxRetries: 0\n      };\n      if (!params.baseURL) {\n        delete params.baseURL;\n      }\n      this.client = new OpenAIClient(params);\n    }\n    const requestOptions = {};\n    if (this.azureOpenAIApiKey) {\n      requestOptions.headers = {\n        \"api-key\": this.azureOpenAIApiKey,\n        ...requestOptions.headers\n      };\n      requestOptions.query = {\n        \"api-version\": this.azureOpenAIApiVersion,\n        ...requestOptions.query\n      };\n    }\n    return this.caller.call(async () => {\n      try {\n        const res = await this.client.embeddings.create(request, requestOptions);\n        return res;\n      } catch (e) {\n        const error = wrapOpenAIClientError(e);\n        throw error;\n      }\n    });\n  }\n}","map":{"version":3,"names":["OpenAI","OpenAIClient","getEnvironmentVariable","Embeddings","chunkArray","getEndpoint","wrapOpenAIClientError","OpenAIEmbeddings","constructor","fields","configuration","fieldsWithDefaults","maxConcurrency","Object","defineProperty","enumerable","configurable","writable","value","apiKey","openAIApiKey","azureApiKey","azureOpenAIApiKey","Error","azureApiInstanceName","azureOpenAIApiInstanceName","azureApiDeploymentName","azureOpenAIApiEmbeddingsDeploymentName","azureOpenAIApiDeploymentName","azureApiVersion","azureOpenAIApiVersion","azureOpenAIBasePath","organization","modelName","batchSize","stripNewLines","timeout","dimensions","clientConfig","baseURL","basePath","dangerouslyAllowBrowser","defaultHeaders","baseOptions","headers","defaultQuery","params","embedDocuments","texts","batches","map","t","replace","batchRequests","batch","model","input","embeddingWithRetry","batchResponses","Promise","all","embeddings","i","length","data","batchResponse","j","push","embedding","embedQuery","text","request","client","openAIEndpointConfig","endpoint","maxRetries","requestOptions","query","caller","call","res","create","e","error"],"sources":["/Users/mandylin/Desktop/WebCrack React/webcrack/node_modules/@langchain/openai/dist/embeddings.js"],"sourcesContent":["import { OpenAI as OpenAIClient } from \"openai\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { Embeddings } from \"@langchain/core/embeddings\";\nimport { chunkArray } from \"@langchain/core/utils/chunk_array\";\nimport { getEndpoint } from \"./utils/azure.js\";\nimport { wrapOpenAIClientError } from \"./utils/openai.js\";\n/**\n * Class for generating embeddings using the OpenAI API. Extends the\n * Embeddings class and implements OpenAIEmbeddingsParams and\n * AzureOpenAIInput.\n * @example\n * ```typescript\n * // Embed a query using OpenAIEmbeddings to generate embeddings for a given text\n * const model = new OpenAIEmbeddings();\n * const res = await model.embedQuery(\n *   \"What would be a good company name for a company that makes colorful socks?\",\n * );\n * console.log({ res });\n *\n * ```\n */\nexport class OpenAIEmbeddings extends Embeddings {\n    constructor(fields, configuration) {\n        const fieldsWithDefaults = { maxConcurrency: 2, ...fields };\n        super(fieldsWithDefaults);\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"text-embedding-ada-002\"\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 512\n        });\n        // TODO: Update to `false` on next minor release (see: https://github.com/langchain-ai/langchainjs/pull/3612)\n        Object.defineProperty(this, \"stripNewLines\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        /**\n         * The number of dimensions the resulting output embeddings should have.\n         * Only supported in `text-embedding-3` and later models.\n         */\n        Object.defineProperty(this, \"dimensions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        let apiKey = fieldsWithDefaults?.openAIApiKey ??\n            getEnvironmentVariable(\"OPENAI_API_KEY\");\n        const azureApiKey = fieldsWithDefaults?.azureOpenAIApiKey ??\n            getEnvironmentVariable(\"AZURE_OPENAI_API_KEY\");\n        if (!azureApiKey && !apiKey) {\n            throw new Error(\"OpenAI or Azure OpenAI API key not found\");\n        }\n        const azureApiInstanceName = fieldsWithDefaults?.azureOpenAIApiInstanceName ??\n            getEnvironmentVariable(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        const azureApiDeploymentName = (fieldsWithDefaults?.azureOpenAIApiEmbeddingsDeploymentName ||\n            fieldsWithDefaults?.azureOpenAIApiDeploymentName) ??\n            (getEnvironmentVariable(\"AZURE_OPENAI_API_EMBEDDINGS_DEPLOYMENT_NAME\") ||\n                getEnvironmentVariable(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        const azureApiVersion = fieldsWithDefaults?.azureOpenAIApiVersion ??\n            getEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath =\n            fieldsWithDefaults?.azureOpenAIBasePath ??\n                getEnvironmentVariable(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization =\n            fieldsWithDefaults?.configuration?.organization ??\n                getEnvironmentVariable(\"OPENAI_ORGANIZATION\");\n        this.modelName = fieldsWithDefaults?.modelName ?? this.modelName;\n        this.batchSize =\n            fieldsWithDefaults?.batchSize ?? (azureApiKey ? 1 : this.batchSize);\n        this.stripNewLines =\n            fieldsWithDefaults?.stripNewLines ?? this.stripNewLines;\n        this.timeout = fieldsWithDefaults?.timeout;\n        this.dimensions = fieldsWithDefaults?.dimensions;\n        this.azureOpenAIApiVersion = azureApiVersion;\n        this.azureOpenAIApiKey = azureApiKey;\n        this.azureOpenAIApiInstanceName = azureApiInstanceName;\n        this.azureOpenAIApiDeploymentName = azureApiDeploymentName;\n        if (this.azureOpenAIApiKey) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            apiKey = apiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration,\n        };\n    }\n    /**\n     * Method to generate embeddings for an array of documents. Splits the\n     * documents into batches and makes requests to the OpenAI API to generate\n     * embeddings.\n     * @param texts Array of documents to generate embeddings for.\n     * @returns Promise that resolves to a 2D array of embeddings for each document.\n     */\n    async embedDocuments(texts) {\n        const batches = chunkArray(this.stripNewLines ? texts.map((t) => t.replace(/\\n/g, \" \")) : texts, this.batchSize);\n        const batchRequests = batches.map((batch) => {\n            const params = {\n                model: this.modelName,\n                input: batch,\n            };\n            if (this.dimensions) {\n                params.dimensions = this.dimensions;\n            }\n            return this.embeddingWithRetry(params);\n        });\n        const batchResponses = await Promise.all(batchRequests);\n        const embeddings = [];\n        for (let i = 0; i < batchResponses.length; i += 1) {\n            const batch = batches[i];\n            const { data: batchResponse } = batchResponses[i];\n            for (let j = 0; j < batch.length; j += 1) {\n                embeddings.push(batchResponse[j].embedding);\n            }\n        }\n        return embeddings;\n    }\n    /**\n     * Method to generate an embedding for a single document. Calls the\n     * embeddingWithRetry method with the document as the input.\n     * @param text Document to generate an embedding for.\n     * @returns Promise that resolves to an embedding for the document.\n     */\n    async embedQuery(text) {\n        const params = {\n            model: this.modelName,\n            input: this.stripNewLines ? text.replace(/\\n/g, \" \") : text,\n        };\n        if (this.dimensions) {\n            params.dimensions = this.dimensions;\n        }\n        const { data } = await this.embeddingWithRetry(params);\n        return data[0].embedding;\n    }\n    /**\n     * Private method to make a request to the OpenAI API to generate\n     * embeddings. Handles the retry logic and returns the response from the\n     * API.\n     * @param request Request to send to the OpenAI API.\n     * @returns Promise that resolves to the response from the API.\n     */\n    async embeddingWithRetry(request) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL,\n            };\n            const endpoint = getEndpoint(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new OpenAIClient(params);\n        }\n        const requestOptions = {};\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers,\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query,\n            };\n        }\n        return this.caller.call(async () => {\n            try {\n                const res = await this.client.embeddings.create(request, requestOptions);\n                return res;\n            }\n            catch (e) {\n                const error = wrapOpenAIClientError(e);\n                throw error;\n            }\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}