{"ast":null,"code":"// similarity.js\n// https://github.com/aceakash/string-similarity\n\nimport { isArray, isString } from 'bellajs';\nconst areArgsValid = (mainString, targetStrings) => {\n  return isString(mainString) && isArray(targetStrings) && targetStrings.length > 0 && targetStrings.every(s => isString(s));\n};\nexport const compareTwoStrings = (first, second) => {\n  first = first.replace(/\\s+/g, '');\n  second = second.replace(/\\s+/g, '');\n  if (first === second) return 1; // identical or empty\n  if (first.length < 2 || second.length < 2) return 0; // if either is a 0-letter or 1-letter string\n\n  let firstBigrams = new Map();\n  for (let i = 0; i < first.length - 1; i++) {\n    const bigram = first.substring(i, i + 2);\n    const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) + 1 : 1;\n    firstBigrams.set(bigram, count);\n  }\n  let intersectionSize = 0;\n  for (let i = 0; i < second.length - 1; i++) {\n    const bigram = second.substring(i, i + 2);\n    const count = firstBigrams.has(bigram) ? firstBigrams.get(bigram) : 0;\n    if (count > 0) {\n      firstBigrams.set(bigram, count - 1);\n      intersectionSize++;\n    }\n  }\n  return 2.0 * intersectionSize / (first.length + second.length - 2);\n};\nexport const findBestMatch = (mainString, targetStrings) => {\n  if (!areArgsValid(mainString, targetStrings)) {\n    throw new Error('Bad arguments: First argument should be a string, second should be an array of strings');\n  }\n  const ratings = [];\n  let bestMatchIndex = 0;\n  for (let i = 0; i < targetStrings.length; i++) {\n    const currentTargetString = targetStrings[i];\n    const currentRating = compareTwoStrings(mainString, currentTargetString);\n    ratings.push({\n      target: currentTargetString,\n      rating: currentRating\n    });\n    if (currentRating > ratings[bestMatchIndex].rating) {\n      bestMatchIndex = i;\n    }\n  }\n  const bestMatch = ratings[bestMatchIndex];\n  return {\n    ratings: ratings,\n    bestMatch: bestMatch,\n    bestMatchIndex: bestMatchIndex\n  };\n};","map":{"version":3,"names":["isArray","isString","areArgsValid","mainString","targetStrings","length","every","s","compareTwoStrings","first","second","replace","firstBigrams","Map","i","bigram","substring","count","has","get","set","intersectionSize","findBestMatch","Error","ratings","bestMatchIndex","currentTargetString","currentRating","push","target","rating","bestMatch"],"sources":["/Users/mandylin/Desktop/WebCrack React 2/webcrack/node_modules/@extractus/article-extractor/src/utils/similarity.js"],"sourcesContent":["// similarity.js\n// https://github.com/aceakash/string-similarity\n\nimport { isArray, isString } from 'bellajs'\n\nconst areArgsValid = (mainString, targetStrings) => {\n  return isString(mainString) && isArray(targetStrings)\n    && targetStrings.length > 0 && targetStrings.every(s => isString(s))\n}\n\nexport const compareTwoStrings = (first, second) => {\n  first = first.replace(/\\s+/g, '')\n  second = second.replace(/\\s+/g, '')\n\n  if (first === second) return 1 // identical or empty\n  if (first.length < 2 || second.length < 2) return 0 // if either is a 0-letter or 1-letter string\n\n  let firstBigrams = new Map()\n  for (let i = 0; i < first.length - 1; i++) {\n    const bigram = first.substring(i, i + 2)\n    const count = firstBigrams.has(bigram)\n      ? firstBigrams.get(bigram) + 1\n      : 1\n\n    firstBigrams.set(bigram, count)\n  }\n\n  let intersectionSize = 0\n  for (let i = 0; i < second.length - 1; i++) {\n    const bigram = second.substring(i, i + 2)\n    const count = firstBigrams.has(bigram)\n      ? firstBigrams.get(bigram)\n      : 0\n\n    if (count > 0) {\n      firstBigrams.set(bigram, count - 1)\n      intersectionSize++\n    }\n  }\n\n  return (2.0 * intersectionSize) / (first.length + second.length - 2)\n}\n\nexport const findBestMatch = (mainString, targetStrings) => {\n  if (!areArgsValid(mainString, targetStrings)) {\n    throw new Error('Bad arguments: First argument should be a string, second should be an array of strings')\n  }\n\n  const ratings = []\n  let bestMatchIndex = 0\n\n  for (let i = 0; i < targetStrings.length; i++) {\n    const currentTargetString = targetStrings[i]\n    const currentRating = compareTwoStrings(mainString, currentTargetString)\n    ratings.push({ target: currentTargetString, rating: currentRating })\n    if (currentRating > ratings[bestMatchIndex].rating) {\n      bestMatchIndex = i\n    }\n  }\n\n  const bestMatch = ratings[bestMatchIndex]\n\n  return { ratings: ratings, bestMatch: bestMatch, bestMatchIndex: bestMatchIndex }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}