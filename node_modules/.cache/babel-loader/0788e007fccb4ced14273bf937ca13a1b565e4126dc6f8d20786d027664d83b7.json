{"ast":null,"code":"import { BaseStringPromptTemplate } from \"./string.js\";\nimport { checkValidTemplate, renderTemplate } from \"./template.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nimport { BaseChatPromptTemplate } from \"./chat.js\";\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n * @example\n * ```typescript\n * const examplePrompt = PromptTemplate.fromTemplate(\n *   \"Input: {input}\\nOutput: {output}\",\n * );\n *\n * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   new OpenAIEmbeddings(),\n *   HNSWLib,\n *   { k: 1 },\n * );\n *\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt,\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n *\n * // Format the dynamic prompt with the input 'rainy'\n * console.log(await dynamicPrompt.format({ adjective: \"rainy\" }));\n *\n * ```\n */\nexport class FewShotPromptTemplate extends BaseStringPromptTemplate {\n  constructor(input) {\n    super(input);\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"examples\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"exampleSelector\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"examplePrompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"suffix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"exampleSeparator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\\n\\n\"\n    });\n    Object.defineProperty(this, \"prefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"templateFormat\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"f-string\"\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.assign(this, input);\n    if (this.examples !== undefined && this.exampleSelector !== undefined) {\n      throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.examples === undefined && this.exampleSelector === undefined) {\n      throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.validateTemplate) {\n      let totalInputVariables = this.inputVariables;\n      if (this.partialVariables) {\n        totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n      }\n      checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n    }\n  }\n  _getPromptType() {\n    return \"few_shot\";\n  }\n  static lc_name() {\n    return \"FewShotPromptTemplate\";\n  }\n  async getExamples(inputVariables) {\n    if (this.examples !== undefined) {\n      return this.examples;\n    }\n    if (this.exampleSelector !== undefined) {\n      return this.exampleSelector.selectExamples(inputVariables);\n    }\n    throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n  }\n  async partial(values) {\n    var _this$partialVariable;\n    const newInputVariables = this.inputVariables.filter(iv => !(iv in values));\n    const newPartialVariables = {\n      ...((_this$partialVariable = this.partialVariables) !== null && _this$partialVariable !== void 0 ? _this$partialVariable : {}),\n      ...values\n    };\n    const promptDict = {\n      ...this,\n      inputVariables: newInputVariables,\n      partialVariables: newPartialVariables\n    };\n    return new FewShotPromptTemplate(promptDict);\n  }\n  /**\n   * Formats the prompt with the given values.\n   * @param values The values to format the prompt with.\n   * @returns A promise that resolves to a string representing the formatted prompt.\n   */\n  async format(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    const examples = await this.getExamples(allValues);\n    const exampleStrings = await Promise.all(examples.map(example => this.examplePrompt.format(example)));\n    const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n    return renderTemplate(template, this.templateFormat, allValues);\n  }\n  serialize() {\n    if (this.exampleSelector || !this.examples) {\n      throw new Error(\"Serializing an example selector is not currently supported\");\n    }\n    if (this.outputParser !== undefined) {\n      throw new Error(\"Serializing an output parser is not currently supported\");\n    }\n    return {\n      _type: this._getPromptType(),\n      input_variables: this.inputVariables,\n      example_prompt: this.examplePrompt.serialize(),\n      example_separator: this.exampleSeparator,\n      suffix: this.suffix,\n      prefix: this.prefix,\n      template_format: this.templateFormat,\n      examples: this.examples\n    };\n  }\n  static async deserialize(data) {\n    const {\n      example_prompt\n    } = data;\n    if (!example_prompt) {\n      throw new Error(\"Missing example prompt\");\n    }\n    const examplePrompt = await PromptTemplate.deserialize(example_prompt);\n    let examples;\n    if (Array.isArray(data.examples)) {\n      examples = data.examples;\n    } else {\n      throw new Error(\"Invalid examples format. Only list or string are supported.\");\n    }\n    return new FewShotPromptTemplate({\n      inputVariables: data.input_variables,\n      examplePrompt,\n      examples,\n      exampleSeparator: data.example_separator,\n      prefix: data.prefix,\n      suffix: data.suffix,\n      templateFormat: data.template_format\n    });\n  }\n}\n/**\n * Chat prompt template that contains few-shot examples.\n * @augments BasePromptTemplateInput\n * @augments FewShotChatMessagePromptTemplateInput\n */\nexport class FewShotChatMessagePromptTemplate extends BaseChatPromptTemplate {\n  _getPromptType() {\n    return \"few_shot_chat\";\n  }\n  static lc_name() {\n    return \"FewShotChatMessagePromptTemplate\";\n  }\n  constructor(fields) {\n    var _fields$exampleSepara, _fields$prefix, _fields$suffix, _fields$templateForma, _fields$validateTempl;\n    super(fields);\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"examples\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"exampleSelector\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"examplePrompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"suffix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"exampleSeparator\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\\n\\n\"\n    });\n    Object.defineProperty(this, \"prefix\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"\"\n    });\n    Object.defineProperty(this, \"templateFormat\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"f-string\"\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    this.examples = fields.examples;\n    this.examplePrompt = fields.examplePrompt;\n    this.exampleSeparator = (_fields$exampleSepara = fields.exampleSeparator) !== null && _fields$exampleSepara !== void 0 ? _fields$exampleSepara : \"\\n\\n\";\n    this.exampleSelector = fields.exampleSelector;\n    this.prefix = (_fields$prefix = fields.prefix) !== null && _fields$prefix !== void 0 ? _fields$prefix : \"\";\n    this.suffix = (_fields$suffix = fields.suffix) !== null && _fields$suffix !== void 0 ? _fields$suffix : \"\";\n    this.templateFormat = (_fields$templateForma = fields.templateFormat) !== null && _fields$templateForma !== void 0 ? _fields$templateForma : \"f-string\";\n    this.validateTemplate = (_fields$validateTempl = fields.validateTemplate) !== null && _fields$validateTempl !== void 0 ? _fields$validateTempl : true;\n    if (this.examples !== undefined && this.exampleSelector !== undefined) {\n      throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.examples === undefined && this.exampleSelector === undefined) {\n      throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    if (this.validateTemplate) {\n      let totalInputVariables = this.inputVariables;\n      if (this.partialVariables) {\n        totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n      }\n      checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n    }\n  }\n  async getExamples(inputVariables) {\n    if (this.examples !== undefined) {\n      return this.examples;\n    }\n    if (this.exampleSelector !== undefined) {\n      return this.exampleSelector.selectExamples(inputVariables);\n    }\n    throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n  }\n  /**\n   * Formats the list of values and returns a list of formatted messages.\n   * @param values The values to format the prompt with.\n   * @returns A promise that resolves to a string representing the formatted prompt.\n   */\n  async formatMessages(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    let examples = await this.getExamples(allValues);\n    examples = examples.map(example => {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const result = {};\n      this.examplePrompt.inputVariables.forEach(inputVariable => {\n        result[inputVariable] = example[inputVariable];\n      });\n      return result;\n    });\n    const messages = [];\n    for (const example of examples) {\n      const exampleMessages = await this.examplePrompt.formatMessages(example);\n      messages.push(...exampleMessages);\n    }\n    return messages;\n  }\n  /**\n   * Formats the prompt with the given values.\n   * @param values The values to format the prompt with.\n   * @returns A promise that resolves to a string representing the formatted prompt.\n   */\n  async format(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    const examples = await this.getExamples(allValues);\n    const exampleMessages = await Promise.all(examples.map(example => this.examplePrompt.formatMessages(example)));\n    const exampleStrings = exampleMessages.flat().map(message => message.content);\n    const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n    return renderTemplate(template, this.templateFormat, allValues);\n  }\n  /**\n   * Partially formats the prompt with the given values.\n   * @param values The values to partially format the prompt with.\n   * @returns A promise that resolves to an instance of `FewShotChatMessagePromptTemplate` with the given values partially formatted.\n   */\n  async partial(values) {\n    var _this$partialVariable2;\n    const newInputVariables = this.inputVariables.filter(variable => !(variable in values));\n    const newPartialVariables = {\n      ...((_this$partialVariable2 = this.partialVariables) !== null && _this$partialVariable2 !== void 0 ? _this$partialVariable2 : {}),\n      ...values\n    };\n    const promptDict = {\n      ...this,\n      inputVariables: newInputVariables,\n      partialVariables: newPartialVariables\n    };\n    return new FewShotChatMessagePromptTemplate(promptDict);\n  }\n}","map":{"version":3,"names":["BaseStringPromptTemplate","checkValidTemplate","renderTemplate","PromptTemplate","BaseChatPromptTemplate","FewShotPromptTemplate","constructor","input","Object","defineProperty","enumerable","configurable","writable","value","assign","examples","undefined","exampleSelector","Error","validateTemplate","totalInputVariables","inputVariables","partialVariables","concat","keys","prefix","suffix","templateFormat","_getPromptType","lc_name","getExamples","selectExamples","partial","values","_this$partialVariable","newInputVariables","filter","iv","newPartialVariables","promptDict","format","allValues","mergePartialAndUserVariables","exampleStrings","Promise","all","map","example","examplePrompt","template","join","exampleSeparator","serialize","outputParser","_type","input_variables","example_prompt","example_separator","template_format","deserialize","data","Array","isArray","FewShotChatMessagePromptTemplate","fields","_fields$exampleSepara","_fields$prefix","_fields$suffix","_fields$templateForma","_fields$validateTempl","formatMessages","result","forEach","inputVariable","messages","exampleMessages","push","flat","message","content","_this$partialVariable2","variable"],"sources":["/Users/mandylin/Desktop/WebCrack React 2/webcrack/node_modules/@langchain/core/dist/prompts/few_shot.js"],"sourcesContent":["import { BaseStringPromptTemplate } from \"./string.js\";\nimport { checkValidTemplate, renderTemplate, } from \"./template.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nimport { BaseChatPromptTemplate, } from \"./chat.js\";\n/**\n * Prompt template that contains few-shot examples.\n * @augments BasePromptTemplate\n * @augments FewShotPromptTemplateInput\n * @example\n * ```typescript\n * const examplePrompt = PromptTemplate.fromTemplate(\n *   \"Input: {input}\\nOutput: {output}\",\n * );\n *\n * const exampleSelector = await SemanticSimilarityExampleSelector.fromExamples(\n *   [\n *     { input: \"happy\", output: \"sad\" },\n *     { input: \"tall\", output: \"short\" },\n *     { input: \"energetic\", output: \"lethargic\" },\n *     { input: \"sunny\", output: \"gloomy\" },\n *     { input: \"windy\", output: \"calm\" },\n *   ],\n *   new OpenAIEmbeddings(),\n *   HNSWLib,\n *   { k: 1 },\n * );\n *\n * const dynamicPrompt = new FewShotPromptTemplate({\n *   exampleSelector,\n *   examplePrompt,\n *   prefix: \"Give the antonym of every input\",\n *   suffix: \"Input: {adjective}\\nOutput:\",\n *   inputVariables: [\"adjective\"],\n * });\n *\n * // Format the dynamic prompt with the input 'rainy'\n * console.log(await dynamicPrompt.format({ adjective: \"rainy\" }));\n *\n * ```\n */\nexport class FewShotPromptTemplate extends BaseStringPromptTemplate {\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    _getPromptType() {\n        return \"few_shot\";\n    }\n    static lc_name() {\n        return \"FewShotPromptTemplate\";\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new FewShotPromptTemplate(promptDict);\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleStrings = await Promise.all(examples.map((example) => this.examplePrompt.format(example)));\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    serialize() {\n        if (this.exampleSelector || !this.examples) {\n            throw new Error(\"Serializing an example selector is not currently supported\");\n        }\n        if (this.outputParser !== undefined) {\n            throw new Error(\"Serializing an output parser is not currently supported\");\n        }\n        return {\n            _type: this._getPromptType(),\n            input_variables: this.inputVariables,\n            example_prompt: this.examplePrompt.serialize(),\n            example_separator: this.exampleSeparator,\n            suffix: this.suffix,\n            prefix: this.prefix,\n            template_format: this.templateFormat,\n            examples: this.examples,\n        };\n    }\n    static async deserialize(data) {\n        const { example_prompt } = data;\n        if (!example_prompt) {\n            throw new Error(\"Missing example prompt\");\n        }\n        const examplePrompt = await PromptTemplate.deserialize(example_prompt);\n        let examples;\n        if (Array.isArray(data.examples)) {\n            examples = data.examples;\n        }\n        else {\n            throw new Error(\"Invalid examples format. Only list or string are supported.\");\n        }\n        return new FewShotPromptTemplate({\n            inputVariables: data.input_variables,\n            examplePrompt,\n            examples,\n            exampleSeparator: data.example_separator,\n            prefix: data.prefix,\n            suffix: data.suffix,\n            templateFormat: data.template_format,\n        });\n    }\n}\n/**\n * Chat prompt template that contains few-shot examples.\n * @augments BasePromptTemplateInput\n * @augments FewShotChatMessagePromptTemplateInput\n */\nexport class FewShotChatMessagePromptTemplate extends BaseChatPromptTemplate {\n    _getPromptType() {\n        return \"few_shot_chat\";\n    }\n    static lc_name() {\n        return \"FewShotChatMessagePromptTemplate\";\n    }\n    constructor(fields) {\n        super(fields);\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"examples\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exampleSelector\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"examplePrompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"suffix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"exampleSeparator\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\\n\\n\"\n        });\n        Object.defineProperty(this, \"prefix\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"\"\n        });\n        Object.defineProperty(this, \"templateFormat\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"f-string\"\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        this.examples = fields.examples;\n        this.examplePrompt = fields.examplePrompt;\n        this.exampleSeparator = fields.exampleSeparator ?? \"\\n\\n\";\n        this.exampleSelector = fields.exampleSelector;\n        this.prefix = fields.prefix ?? \"\";\n        this.suffix = fields.suffix ?? \"\";\n        this.templateFormat = fields.templateFormat ?? \"f-string\";\n        this.validateTemplate = fields.validateTemplate ?? true;\n        if (this.examples !== undefined && this.exampleSelector !== undefined) {\n            throw new Error(\"Only one of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.examples === undefined && this.exampleSelector === undefined) {\n            throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n        }\n        if (this.validateTemplate) {\n            let totalInputVariables = this.inputVariables;\n            if (this.partialVariables) {\n                totalInputVariables = totalInputVariables.concat(Object.keys(this.partialVariables));\n            }\n            checkValidTemplate(this.prefix + this.suffix, this.templateFormat, totalInputVariables);\n        }\n    }\n    async getExamples(inputVariables) {\n        if (this.examples !== undefined) {\n            return this.examples;\n        }\n        if (this.exampleSelector !== undefined) {\n            return this.exampleSelector.selectExamples(inputVariables);\n        }\n        throw new Error(\"One of 'examples' and 'example_selector' should be provided\");\n    }\n    /**\n     * Formats the list of values and returns a list of formatted messages.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let examples = await this.getExamples(allValues);\n        examples = examples.map((example) => {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const result = {};\n            this.examplePrompt.inputVariables.forEach((inputVariable) => {\n                result[inputVariable] = example[inputVariable];\n            });\n            return result;\n        });\n        const messages = [];\n        for (const example of examples) {\n            const exampleMessages = await this.examplePrompt.formatMessages(example);\n            messages.push(...exampleMessages);\n        }\n        return messages;\n    }\n    /**\n     * Formats the prompt with the given values.\n     * @param values The values to format the prompt with.\n     * @returns A promise that resolves to a string representing the formatted prompt.\n     */\n    async format(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        const examples = await this.getExamples(allValues);\n        const exampleMessages = await Promise.all(examples.map((example) => this.examplePrompt.formatMessages(example)));\n        const exampleStrings = exampleMessages\n            .flat()\n            .map((message) => message.content);\n        const template = [this.prefix, ...exampleStrings, this.suffix].join(this.exampleSeparator);\n        return renderTemplate(template, this.templateFormat, allValues);\n    }\n    /**\n     * Partially formats the prompt with the given values.\n     * @param values The values to partially format the prompt with.\n     * @returns A promise that resolves to an instance of `FewShotChatMessagePromptTemplate` with the given values partially formatted.\n     */\n    async partial(values) {\n        const newInputVariables = this.inputVariables.filter((variable) => !(variable in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new FewShotChatMessagePromptTemplate(promptDict);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}