{"ast":null,"code":"import PQueueMod from \"p-queue\";\nlet queue;\n/**\n * Creates a queue using the p-queue library. The queue is configured to\n * auto-start and has a concurrency of 1, meaning it will process tasks\n * one at a time.\n */\nfunction createQueue() {\n  const PQueue = \"default\" in PQueueMod ? PQueueMod.default : PQueueMod;\n  return new PQueue({\n    autoStart: true,\n    concurrency: 1\n  });\n}\n/**\n * Consume a promise, either adding it to the queue or waiting for it to resolve\n * @param promise Promise to consume\n * @param wait Whether to wait for the promise to resolve or resolve immediately\n */\nexport async function consumeCallback(promiseFn, wait) {\n  if (wait === true) {\n    await promiseFn();\n  } else {\n    if (typeof queue === \"undefined\") {\n      queue = createQueue();\n    }\n    void queue.add(promiseFn);\n  }\n}\n/**\n * Waits for all promises in the queue to resolve. If the queue is\n * undefined, it immediately resolves a promise.\n */\nexport function awaitAllCallbacks() {\n  return typeof queue !== \"undefined\" ? queue.onIdle() : Promise.resolve();\n}","map":{"version":3,"names":["PQueueMod","queue","createQueue","PQueue","default","autoStart","concurrency","consumeCallback","promiseFn","wait","add","awaitAllCallbacks","onIdle","Promise","resolve"],"sources":["/Users/mandylin/Desktop/WebCrack React/webcrack/node_modules/@langchain/core/dist/callbacks/promises.js"],"sourcesContent":["import PQueueMod from \"p-queue\";\nlet queue;\n/**\n * Creates a queue using the p-queue library. The queue is configured to\n * auto-start and has a concurrency of 1, meaning it will process tasks\n * one at a time.\n */\nfunction createQueue() {\n    const PQueue = \"default\" in PQueueMod ? PQueueMod.default : PQueueMod;\n    return new PQueue({\n        autoStart: true,\n        concurrency: 1,\n    });\n}\n/**\n * Consume a promise, either adding it to the queue or waiting for it to resolve\n * @param promise Promise to consume\n * @param wait Whether to wait for the promise to resolve or resolve immediately\n */\nexport async function consumeCallback(promiseFn, wait) {\n    if (wait === true) {\n        await promiseFn();\n    }\n    else {\n        if (typeof queue === \"undefined\") {\n            queue = createQueue();\n        }\n        void queue.add(promiseFn);\n    }\n}\n/**\n * Waits for all promises in the queue to resolve. If the queue is\n * undefined, it immediately resolves a promise.\n */\nexport function awaitAllCallbacks() {\n    return typeof queue !== \"undefined\" ? queue.onIdle() : Promise.resolve();\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,SAAS;AAC/B,IAAIC,KAAK;AACT;AACA;AACA;AACA;AACA;AACA,SAASC,WAAWA,CAAA,EAAG;EACnB,MAAMC,MAAM,GAAG,SAAS,IAAIH,SAAS,GAAGA,SAAS,CAACI,OAAO,GAAGJ,SAAS;EACrE,OAAO,IAAIG,MAAM,CAAC;IACdE,SAAS,EAAE,IAAI;IACfC,WAAW,EAAE;EACjB,CAAC,CAAC;AACN;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,eAAeA,CAACC,SAAS,EAAEC,IAAI,EAAE;EACnD,IAAIA,IAAI,KAAK,IAAI,EAAE;IACf,MAAMD,SAAS,CAAC,CAAC;EACrB,CAAC,MACI;IACD,IAAI,OAAOP,KAAK,KAAK,WAAW,EAAE;MAC9BA,KAAK,GAAGC,WAAW,CAAC,CAAC;IACzB;IACA,KAAKD,KAAK,CAACS,GAAG,CAACF,SAAS,CAAC;EAC7B;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,SAASG,iBAAiBA,CAAA,EAAG;EAChC,OAAO,OAAOV,KAAK,KAAK,WAAW,GAAGA,KAAK,CAACW,MAAM,CAAC,CAAC,GAAGC,OAAO,CAACC,OAAO,CAAC,CAAC;AAC5E"},"metadata":{},"sourceType":"module","externalDependencies":[]}