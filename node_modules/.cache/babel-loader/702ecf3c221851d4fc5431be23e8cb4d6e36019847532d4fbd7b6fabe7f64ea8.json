{"ast":null,"code":"// utils --> transformation.js\n\nimport { isArray, isFunction, clone } from 'bellajs';\nimport { DOMParser } from 'linkedom';\nconst transformations = [];\nconst add = tn => {\n  const {\n    patterns\n  } = tn;\n  if (!patterns || !isArray(patterns) || !patterns.length) {\n    return 0;\n  }\n  transformations.push(tn);\n  return 1;\n};\nexport const addTransformations = tfms => {\n  if (isArray(tfms)) {\n    return tfms.map(tfm => add(tfm)).filter(result => result === 1).length;\n  }\n  return add(tfms);\n};\nexport const removeTransformations = patterns => {\n  if (!patterns) {\n    const removed = transformations.length;\n    transformations.length = 0;\n    return removed;\n  }\n  let removing = 0;\n  for (let i = transformations.length - 1; i > 0; i--) {\n    const {\n      patterns: ipatterns\n    } = transformations[i];\n    const matched = ipatterns.some(ptn => patterns.some(pattern => String(pattern) === String(ptn)));\n    if (matched) {\n      transformations.splice(i, 1);\n      removing += 1;\n    }\n  }\n  return removing;\n};\nexport const getTransformations = () => {\n  return clone(transformations);\n};\nexport const findTransformations = links => {\n  const urls = !isArray(links) ? [links] : links;\n  const tfms = [];\n  for (const transformation of transformations) {\n    const {\n      patterns\n    } = transformation;\n    const matched = urls.some(url => patterns.some(pattern => pattern.test(url)));\n    if (matched) {\n      tfms.push(clone(transformation));\n    }\n  }\n  return tfms;\n};\nexport const execPreParser = (html, links) => {\n  const doc = new DOMParser().parseFromString(html, 'text/html');\n  findTransformations(links).map(tfm => tfm.pre).filter(fn => isFunction(fn)).map(fn => fn(doc));\n  return Array.from(doc.childNodes).map(it => it.outerHTML).join('');\n};\nexport const execPostParser = (html, links) => {\n  const doc = new DOMParser().parseFromString(html, 'text/html');\n  findTransformations(links).map(tfm => tfm.post).filter(fn => isFunction(fn)).map(fn => fn(doc));\n  return Array.from(doc.childNodes).map(it => it.outerHTML).join('');\n};","map":{"version":3,"names":["isArray","isFunction","clone","DOMParser","transformations","add","tn","patterns","length","push","addTransformations","tfms","map","tfm","filter","result","removeTransformations","removed","removing","i","ipatterns","matched","some","ptn","pattern","String","splice","getTransformations","findTransformations","links","urls","transformation","url","test","execPreParser","html","doc","parseFromString","pre","fn","Array","from","childNodes","it","outerHTML","join","execPostParser","post"],"sources":["/Users/mandylin/Desktop/WebCrack React 2/webcrack/node_modules/@extractus/article-extractor/src/utils/transformation.js"],"sourcesContent":["// utils --> transformation.js\n\nimport { isArray, isFunction, clone } from 'bellajs'\nimport { DOMParser } from 'linkedom'\n\nconst transformations = []\n\nconst add = (tn) => {\n  const { patterns } = tn\n  if (!patterns || !isArray(patterns) || !patterns.length) {\n    return 0\n  }\n  transformations.push(tn)\n  return 1\n}\n\nexport const addTransformations = (tfms) => {\n  if (isArray(tfms)) {\n    return tfms.map(tfm => add(tfm)).filter(result => result === 1).length\n  }\n  return add(tfms)\n}\n\nexport const removeTransformations = (patterns) => {\n  if (!patterns) {\n    const removed = transformations.length\n    transformations.length = 0\n    return removed\n  }\n  let removing = 0\n  for (let i = transformations.length - 1; i > 0; i--) {\n    const { patterns: ipatterns } = transformations[i]\n    const matched = ipatterns.some((ptn) => patterns.some((pattern) => String(pattern) === String(ptn)))\n    if (matched) {\n      transformations.splice(i, 1)\n      removing += 1\n    }\n  }\n  return removing\n}\n\nexport const getTransformations = () => {\n  return clone(transformations)\n}\n\nexport const findTransformations = (links) => {\n  const urls = !isArray(links) ? [links] : links\n  const tfms = []\n  for (const transformation of transformations) {\n    const { patterns } = transformation\n    const matched = urls.some((url) => patterns.some((pattern) => pattern.test(url)))\n    if (matched) {\n      tfms.push(clone(transformation))\n    }\n  }\n  return tfms\n}\n\nexport const execPreParser = (html, links) => {\n  const doc = new DOMParser().parseFromString(html, 'text/html')\n  findTransformations(links).map(tfm => tfm.pre).filter(fn => isFunction(fn)).map(fn => fn(doc))\n  return Array.from(doc.childNodes).map(it => it.outerHTML).join('')\n}\n\nexport const execPostParser = (html, links) => {\n  const doc = new DOMParser().parseFromString(html, 'text/html')\n  findTransformations(links).map(tfm => tfm.post).filter(fn => isFunction(fn)).map(fn => fn(doc))\n  return Array.from(doc.childNodes).map(it => it.outerHTML).join('')\n}\n"],"mappings":"AAAA;;AAEA,SAASA,OAAO,EAAEC,UAAU,EAAEC,KAAK,QAAQ,SAAS;AACpD,SAASC,SAAS,QAAQ,UAAU;AAEpC,MAAMC,eAAe,GAAG,EAAE;AAE1B,MAAMC,GAAG,GAAIC,EAAE,IAAK;EAClB,MAAM;IAAEC;EAAS,CAAC,GAAGD,EAAE;EACvB,IAAI,CAACC,QAAQ,IAAI,CAACP,OAAO,CAACO,QAAQ,CAAC,IAAI,CAACA,QAAQ,CAACC,MAAM,EAAE;IACvD,OAAO,CAAC;EACV;EACAJ,eAAe,CAACK,IAAI,CAACH,EAAE,CAAC;EACxB,OAAO,CAAC;AACV,CAAC;AAED,OAAO,MAAMI,kBAAkB,GAAIC,IAAI,IAAK;EAC1C,IAAIX,OAAO,CAACW,IAAI,CAAC,EAAE;IACjB,OAAOA,IAAI,CAACC,GAAG,CAACC,GAAG,IAAIR,GAAG,CAACQ,GAAG,CAAC,CAAC,CAACC,MAAM,CAACC,MAAM,IAAIA,MAAM,KAAK,CAAC,CAAC,CAACP,MAAM;EACxE;EACA,OAAOH,GAAG,CAACM,IAAI,CAAC;AAClB,CAAC;AAED,OAAO,MAAMK,qBAAqB,GAAIT,QAAQ,IAAK;EACjD,IAAI,CAACA,QAAQ,EAAE;IACb,MAAMU,OAAO,GAAGb,eAAe,CAACI,MAAM;IACtCJ,eAAe,CAACI,MAAM,GAAG,CAAC;IAC1B,OAAOS,OAAO;EAChB;EACA,IAAIC,QAAQ,GAAG,CAAC;EAChB,KAAK,IAAIC,CAAC,GAAGf,eAAe,CAACI,MAAM,GAAG,CAAC,EAAEW,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACnD,MAAM;MAAEZ,QAAQ,EAAEa;IAAU,CAAC,GAAGhB,eAAe,CAACe,CAAC,CAAC;IAClD,MAAME,OAAO,GAAGD,SAAS,CAACE,IAAI,CAAEC,GAAG,IAAKhB,QAAQ,CAACe,IAAI,CAAEE,OAAO,IAAKC,MAAM,CAACD,OAAO,CAAC,KAAKC,MAAM,CAACF,GAAG,CAAC,CAAC,CAAC;IACpG,IAAIF,OAAO,EAAE;MACXjB,eAAe,CAACsB,MAAM,CAACP,CAAC,EAAE,CAAC,CAAC;MAC5BD,QAAQ,IAAI,CAAC;IACf;EACF;EACA,OAAOA,QAAQ;AACjB,CAAC;AAED,OAAO,MAAMS,kBAAkB,GAAGA,CAAA,KAAM;EACtC,OAAOzB,KAAK,CAACE,eAAe,CAAC;AAC/B,CAAC;AAED,OAAO,MAAMwB,mBAAmB,GAAIC,KAAK,IAAK;EAC5C,MAAMC,IAAI,GAAG,CAAC9B,OAAO,CAAC6B,KAAK,CAAC,GAAG,CAACA,KAAK,CAAC,GAAGA,KAAK;EAC9C,MAAMlB,IAAI,GAAG,EAAE;EACf,KAAK,MAAMoB,cAAc,IAAI3B,eAAe,EAAE;IAC5C,MAAM;MAAEG;IAAS,CAAC,GAAGwB,cAAc;IACnC,MAAMV,OAAO,GAAGS,IAAI,CAACR,IAAI,CAAEU,GAAG,IAAKzB,QAAQ,CAACe,IAAI,CAAEE,OAAO,IAAKA,OAAO,CAACS,IAAI,CAACD,GAAG,CAAC,CAAC,CAAC;IACjF,IAAIX,OAAO,EAAE;MACXV,IAAI,CAACF,IAAI,CAACP,KAAK,CAAC6B,cAAc,CAAC,CAAC;IAClC;EACF;EACA,OAAOpB,IAAI;AACb,CAAC;AAED,OAAO,MAAMuB,aAAa,GAAGA,CAACC,IAAI,EAAEN,KAAK,KAAK;EAC5C,MAAMO,GAAG,GAAG,IAAIjC,SAAS,CAAC,CAAC,CAACkC,eAAe,CAACF,IAAI,EAAE,WAAW,CAAC;EAC9DP,mBAAmB,CAACC,KAAK,CAAC,CAACjB,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACyB,GAAG,CAAC,CAACxB,MAAM,CAACyB,EAAE,IAAItC,UAAU,CAACsC,EAAE,CAAC,CAAC,CAAC3B,GAAG,CAAC2B,EAAE,IAAIA,EAAE,CAACH,GAAG,CAAC,CAAC;EAC9F,OAAOI,KAAK,CAACC,IAAI,CAACL,GAAG,CAACM,UAAU,CAAC,CAAC9B,GAAG,CAAC+B,EAAE,IAAIA,EAAE,CAACC,SAAS,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AACpE,CAAC;AAED,OAAO,MAAMC,cAAc,GAAGA,CAACX,IAAI,EAAEN,KAAK,KAAK;EAC7C,MAAMO,GAAG,GAAG,IAAIjC,SAAS,CAAC,CAAC,CAACkC,eAAe,CAACF,IAAI,EAAE,WAAW,CAAC;EAC9DP,mBAAmB,CAACC,KAAK,CAAC,CAACjB,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACkC,IAAI,CAAC,CAACjC,MAAM,CAACyB,EAAE,IAAItC,UAAU,CAACsC,EAAE,CAAC,CAAC,CAAC3B,GAAG,CAAC2B,EAAE,IAAIA,EAAE,CAACH,GAAG,CAAC,CAAC;EAC/F,OAAOI,KAAK,CAACC,IAAI,CAACL,GAAG,CAACM,UAAU,CAAC,CAAC9B,GAAG,CAAC+B,EAAE,IAAIA,EAAE,CAACC,SAAS,CAAC,CAACC,IAAI,CAAC,EAAE,CAAC;AACpE,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}