{"ast":null,"code":"// utils -> html\n\nimport { DOMParser } from 'linkedom';\nimport sanitize from 'sanitize-html';\nimport { pipe } from 'bellajs';\nimport { getSanitizeHtmlOptions } from '../config.js';\nexport const purify = html => {\n  return sanitize(html, {\n    allowedTags: false,\n    allowedAttributes: false,\n    allowVulnerableTags: true\n  });\n};\nconst WS_REGEXP = /^[\\s\\f\\n\\r\\t\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0]+$/; // eslint-disable-line\n\nconst stripMultiLinebreaks = str => {\n  return str.replace(/(\\r\\n|\\n|\\u2424){2,}/g, '\\n').split('\\n').map(line => {\n    return WS_REGEXP.test(line) ? line.trim() : line;\n  }).filter(line => {\n    return line.length > 0;\n  }).join('\\n');\n};\nconst stripMultispaces = str => {\n  return str.replace(WS_REGEXP, ' ').trim();\n};\nexport const cleanify = inputHtml => {\n  const doc = new DOMParser().parseFromString(inputHtml, 'text/html');\n  const html = doc.documentElement.innerHTML;\n  return pipe(input => sanitize(input, getSanitizeHtmlOptions()), input => stripMultiLinebreaks(input), input => stripMultispaces(input))(html);\n};","map":{"version":3,"names":["DOMParser","sanitize","pipe","getSanitizeHtmlOptions","purify","html","allowedTags","allowedAttributes","allowVulnerableTags","WS_REGEXP","stripMultiLinebreaks","str","replace","split","map","line","test","trim","filter","length","join","stripMultispaces","cleanify","inputHtml","doc","parseFromString","documentElement","innerHTML","input"],"sources":["/Users/mandylin/Desktop/WebCrack React 2/webcrack/node_modules/@extractus/article-extractor/src/utils/html.js"],"sourcesContent":["// utils -> html\n\nimport { DOMParser } from 'linkedom'\nimport sanitize from 'sanitize-html'\nimport { pipe } from 'bellajs'\n\nimport { getSanitizeHtmlOptions } from '../config.js'\n\nexport const purify = (html) => {\n  return sanitize(html, {\n    allowedTags: false,\n    allowedAttributes: false,\n    allowVulnerableTags: true,\n  })\n}\n\nconst WS_REGEXP = /^[\\s\\f\\n\\r\\t\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u2028\\u2029\\u202f\\u205f\\u3000\\ufeff\\x09\\x0a\\x0b\\x0c\\x0d\\x20\\xa0]+$/ // eslint-disable-line\n\nconst stripMultiLinebreaks = (str) => {\n  return str.replace(/(\\r\\n|\\n|\\u2424){2,}/g, '\\n').split('\\n').map((line) => {\n    return WS_REGEXP.test(line) ? line.trim() : line\n  }).filter((line) => {\n    return line.length > 0\n  }).join('\\n')\n}\n\nconst stripMultispaces = (str) => {\n  return str.replace(WS_REGEXP, ' ').trim()\n}\n\nexport const cleanify = (inputHtml) => {\n  const doc = new DOMParser().parseFromString(inputHtml, 'text/html')\n  const html = doc.documentElement.innerHTML\n  return pipe(\n    input => sanitize(input, getSanitizeHtmlOptions()),\n    input => stripMultiLinebreaks(input),\n    input => stripMultispaces(input)\n  )(html)\n}\n"],"mappings":"AAAA;;AAEA,SAASA,SAAS,QAAQ,UAAU;AACpC,OAAOC,QAAQ,MAAM,eAAe;AACpC,SAASC,IAAI,QAAQ,SAAS;AAE9B,SAASC,sBAAsB,QAAQ,cAAc;AAErD,OAAO,MAAMC,MAAM,GAAIC,IAAI,IAAK;EAC9B,OAAOJ,QAAQ,CAACI,IAAI,EAAE;IACpBC,WAAW,EAAE,KAAK;IAClBC,iBAAiB,EAAE,KAAK;IACxBC,mBAAmB,EAAE;EACvB,CAAC,CAAC;AACJ,CAAC;AAED,MAAMC,SAAS,GAAG,+JAA+J,EAAC;;AAElL,MAAMC,oBAAoB,GAAIC,GAAG,IAAK;EACpC,OAAOA,GAAG,CAACC,OAAO,CAAC,uBAAuB,EAAE,IAAI,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC,CAACC,GAAG,CAAEC,IAAI,IAAK;IAC1E,OAAON,SAAS,CAACO,IAAI,CAACD,IAAI,CAAC,GAAGA,IAAI,CAACE,IAAI,CAAC,CAAC,GAAGF,IAAI;EAClD,CAAC,CAAC,CAACG,MAAM,CAAEH,IAAI,IAAK;IAClB,OAAOA,IAAI,CAACI,MAAM,GAAG,CAAC;EACxB,CAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC;AACf,CAAC;AAED,MAAMC,gBAAgB,GAAIV,GAAG,IAAK;EAChC,OAAOA,GAAG,CAACC,OAAO,CAACH,SAAS,EAAE,GAAG,CAAC,CAACQ,IAAI,CAAC,CAAC;AAC3C,CAAC;AAED,OAAO,MAAMK,QAAQ,GAAIC,SAAS,IAAK;EACrC,MAAMC,GAAG,GAAG,IAAIxB,SAAS,CAAC,CAAC,CAACyB,eAAe,CAACF,SAAS,EAAE,WAAW,CAAC;EACnE,MAAMlB,IAAI,GAAGmB,GAAG,CAACE,eAAe,CAACC,SAAS;EAC1C,OAAOzB,IAAI,CACT0B,KAAK,IAAI3B,QAAQ,CAAC2B,KAAK,EAAEzB,sBAAsB,CAAC,CAAC,CAAC,EAClDyB,KAAK,IAAIlB,oBAAoB,CAACkB,KAAK,CAAC,EACpCA,KAAK,IAAIP,gBAAgB,CAACO,KAAK,CACjC,CAAC,CAACvB,IAAI,CAAC;AACT,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}