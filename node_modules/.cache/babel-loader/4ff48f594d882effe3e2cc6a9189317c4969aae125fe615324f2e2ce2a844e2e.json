{"ast":null,"code":"import{PromptTemplate}from\"@langchain/core/prompts\";import{ChatOpenAI}from\"@langchain/openai\";import{OpenAIEmbeddings}from\"@langchain/openai\";import{StringOutputParser}from\"@langchain/core/output_parsers\";import{RunnableSequence}from\"@langchain/core/runnables\";import{extractor}from\"./extractor.mjs\";async function promptOutput(){var prev_output=await extractor();console.log(prev_output);const openAIAPIKey=\"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\";const embeddings=new OpenAIEmbeddings({openAIApiKey:openAIAPIKey});const llm=new ChatOpenAI({openAIApiKey:openAIAPIKey});const testTemplate=\"Read the content from this article and provide answers to these questions: \\\n                            What is the background of the publisher? Is any political slant or bias present in the article? \\\n                            What is the approximate length of the article to read (in minutes)? \\\n                            Format the response to be in JSON output as a dictionary of strings containing \\\n                            publisher background (publisher_background), \\\n                            bias (bias), and the approximate length of the article (article_length_minutes). \\\n                            The variable names are defined in parentheses for each entry in the dictionary. \\\n                            file:{file} \";const testPrompt=PromptTemplate.fromTemplate(testTemplate);const testchain=RunnableSequence.from([testPrompt,llm,new StringOutputParser()]);console.log(prev_output);const response=await testchain.invoke({file:prev_output.content});let final_output={title:prev_output.title,author:prev_output.author,publisher_background:\"\",// reputation of publisher\nbias:\"\",// political bias/slant\narticle_length_minutes:\"\"// length of article\n};var response_output=JSON.parse(response);final_output.publisher_background=response_output.publisher_background;final_output.bias=response_output.bias;final_output.article_length_minutes=response_output.article_length_minutes;// console.log(response);\nconsole.log(final_output);return final_output;}export default promptOutput;","map":{"version":3,"names":["PromptTemplate","ChatOpenAI","OpenAIEmbeddings","StringOutputParser","RunnableSequence","extractor","promptOutput","prev_output","console","log","openAIAPIKey","embeddings","openAIApiKey","llm","testTemplate","testPrompt","fromTemplate","testchain","from","response","invoke","file","content","final_output","title","author","publisher_background","bias","article_length_minutes","response_output","JSON","parse"],"sources":["/Users/mandylin/Desktop/WebCrack React/webcrack/src/promptOutput.mjs"],"sourcesContent":["import { PromptTemplate } from \"@langchain/core/prompts\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { OpenAIEmbeddings } from \"@langchain/openai\";\nimport { StringOutputParser } from \"@langchain/core/output_parsers\";\nimport { RunnableSequence } from \"@langchain/core/runnables\";\n\nimport { extractor } from \"./extractor.mjs\";\n\nasync function promptOutput() {\n  var prev_output = await extractor();\n  console.log(prev_output);\n  const openAIAPIKey = \"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\";\n  const embeddings = new OpenAIEmbeddings({ openAIApiKey: openAIAPIKey });\n\n  const llm = new ChatOpenAI({ openAIApiKey: openAIAPIKey });\n\n  const testTemplate =\n    \"Read the content from this article and provide answers to these questions: \\\n                            What is the background of the publisher? Is any political slant or bias present in the article? \\\n                            What is the approximate length of the article to read (in minutes)? \\\n                            Format the response to be in JSON output as a dictionary of strings containing \\\n                            publisher background (publisher_background), \\\n                            bias (bias), and the approximate length of the article (article_length_minutes). \\\n                            The variable names are defined in parentheses for each entry in the dictionary. \\\n                            file:{file} \";\n\n  const testPrompt = PromptTemplate.fromTemplate(testTemplate);\n  const testchain = RunnableSequence.from([\n    testPrompt,\n    llm,\n    new StringOutputParser(),\n  ]);\n  console.log(prev_output);\n  const response = await testchain.invoke({ file: prev_output.content });\n\n  let final_output = {\n    title: prev_output.title,\n    author: prev_output.author,\n    publisher_background: \"\", // reputation of publisher\n    bias: \"\", // political bias/slant\n    article_length_minutes: \"\", // length of article\n  };\n\n  var response_output = JSON.parse(response);\n\n  final_output.publisher_background = response_output.publisher_background;\n  final_output.bias = response_output.bias;\n  final_output.article_length_minutes = response_output.article_length_minutes;\n\n  // console.log(response);\n  console.log(final_output);\n  return final_output;\n}\n\nexport default promptOutput;\n"],"mappings":"AAAA,OAASA,cAAc,KAAQ,yBAAyB,CACxD,OAASC,UAAU,KAAQ,mBAAmB,CAC9C,OAASC,gBAAgB,KAAQ,mBAAmB,CACpD,OAASC,kBAAkB,KAAQ,gCAAgC,CACnE,OAASC,gBAAgB,KAAQ,2BAA2B,CAE5D,OAASC,SAAS,KAAQ,iBAAiB,CAE3C,cAAe,CAAAC,YAAYA,CAAA,CAAG,CAC5B,GAAI,CAAAC,WAAW,CAAG,KAAM,CAAAF,SAAS,CAAC,CAAC,CACnCG,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC,CACxB,KAAM,CAAAG,YAAY,CAAG,qDAAqD,CAC1E,KAAM,CAAAC,UAAU,CAAG,GAAI,CAAAT,gBAAgB,CAAC,CAAEU,YAAY,CAAEF,YAAa,CAAC,CAAC,CAEvE,KAAM,CAAAG,GAAG,CAAG,GAAI,CAAAZ,UAAU,CAAC,CAAEW,YAAY,CAAEF,YAAa,CAAC,CAAC,CAE1D,KAAM,CAAAI,YAAY,CAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,CAEvC,KAAM,CAAAC,UAAU,CAAGf,cAAc,CAACgB,YAAY,CAACF,YAAY,CAAC,CAC5D,KAAM,CAAAG,SAAS,CAAGb,gBAAgB,CAACc,IAAI,CAAC,CACtCH,UAAU,CACVF,GAAG,CACH,GAAI,CAAAV,kBAAkB,CAAC,CAAC,CACzB,CAAC,CACFK,OAAO,CAACC,GAAG,CAACF,WAAW,CAAC,CACxB,KAAM,CAAAY,QAAQ,CAAG,KAAM,CAAAF,SAAS,CAACG,MAAM,CAAC,CAAEC,IAAI,CAAEd,WAAW,CAACe,OAAQ,CAAC,CAAC,CAEtE,GAAI,CAAAC,YAAY,CAAG,CACjBC,KAAK,CAAEjB,WAAW,CAACiB,KAAK,CACxBC,MAAM,CAAElB,WAAW,CAACkB,MAAM,CAC1BC,oBAAoB,CAAE,EAAE,CAAE;AAC1BC,IAAI,CAAE,EAAE,CAAE;AACVC,sBAAsB,CAAE,EAAI;AAC9B,CAAC,CAED,GAAI,CAAAC,eAAe,CAAGC,IAAI,CAACC,KAAK,CAACZ,QAAQ,CAAC,CAE1CI,YAAY,CAACG,oBAAoB,CAAGG,eAAe,CAACH,oBAAoB,CACxEH,YAAY,CAACI,IAAI,CAAGE,eAAe,CAACF,IAAI,CACxCJ,YAAY,CAACK,sBAAsB,CAAGC,eAAe,CAACD,sBAAsB,CAE5E;AACApB,OAAO,CAACC,GAAG,CAACc,YAAY,CAAC,CACzB,MAAO,CAAAA,YAAY,CACrB,CAEA,cAAe,CAAAjB,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}