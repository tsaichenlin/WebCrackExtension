{"ast":null,"code":"/*global chrome*/\nimport { extract } from \"@extractus/article-extractor\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { OpenAIEmbeddings } from \"@langchain/openai\";\nimport { StringOutputParser } from \"@langchain/core/output_parsers\";\nimport { RunnableSequence } from \"@langchain/core/runnables\";\nimport { RunnablePassthrough } from \"@langchain/core/runnables\";\nasync function extractor(url) {\n  function getURL() {\n    var url = \"\";\n    chrome.tabs.query({\n      active: true,\n      currentWindow: true\n    }, tabs => {\n      var currTab = tabs[0];\n      url = currTab.url;\n      console.log(\"Current tab URL:\", url);\n    });\n    return url;\n  }\n  var input = getURL();\n  //\"https://www.bbc.com/news/world-europe-68323366\";\n\n  var article = \"\";\n  // here we use top-level await, assume current platform supports it\n  try {\n    article = await extract(input);\n  } catch (err) {\n    console.error(err);\n  }\n\n  //console.log(article);\n\n  let curr_article = {\n    title: article.title,\n    author: article.author,\n    publish_date: article.published,\n    content: article.content,\n    topics: [],\n    genre: \"\",\n    key_word_search: \"\"\n  };\n  console.log(\"curr:\");\n  console.log(curr_article);\n  const openAIAPIKey = \"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\";\n  const embeddings = new OpenAIEmbeddings({\n    openAIApiKey: openAIAPIKey\n  });\n  const llm = new ChatOpenAI({\n    openAIApiKey: openAIAPIKey\n  });\n  const testTemplate = \"given the content of the file, only produce the content as a string without the html tags and tabs. \\\n                        Include a list of topics discussed in the article.    \\\n                        Also identify the genre of the article (e.g. political, health, science)      \\\n                        Come up with a 5 key word search for google to find out more information about the article. \\\n                        Format the output in json to be a dictionary containing content (content), topics (topic), genre (genre), \\\n                        and one sentence to inquire further about the article (key_word_search).\\\n                        The variable names are defined in parentheses for each entry in the dictionary. \\\n                        The content will be a string, topics will be a list of a string of topics, \\\n                        genre will be a string, and the key_word_search will be a string. file:{file} article:\";\n  const testPrompt = PromptTemplate.fromTemplate(testTemplate);\n  const testchain = RunnableSequence.from([testPrompt, llm, new StringOutputParser()]);\n  const response = await testchain.invoke({\n    file: article.content\n  });\n  console.log(response);\n  var output = JSON.parse(response);\n\n  // console.log(output);\n  // console.log(output.content);\n  // console.log(output.topics);\n\n  curr_article.content = output.content;\n  curr_article.topics = output.topics;\n  curr_article.genre = output.genre;\n  curr_article.key_word_search = output.key_word_search;\n  console.log(\"final\");\n  console.log(curr_article);\n}\nexport default extractor;","map":{"version":3,"names":["extract","PromptTemplate","ChatOpenAI","OpenAIEmbeddings","StringOutputParser","RunnableSequence","RunnablePassthrough","extractor","url","getURL","chrome","tabs","query","active","currentWindow","currTab","console","log","input","article","err","error","curr_article","title","author","publish_date","published","content","topics","genre","key_word_search","openAIAPIKey","embeddings","openAIApiKey","llm","testTemplate","testPrompt","fromTemplate","testchain","from","response","invoke","file","output","JSON","parse"],"sources":["/Users/mandylin/Desktop/WebCrack React/webcrack/src/extractor.mjs"],"sourcesContent":["/*global chrome*/\nimport { extract } from \"@extractus/article-extractor\";\nimport { PromptTemplate } from \"@langchain/core/prompts\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { OpenAIEmbeddings } from \"@langchain/openai\";\nimport { StringOutputParser } from \"@langchain/core/output_parsers\";\nimport { RunnableSequence } from \"@langchain/core/runnables\";\nimport { RunnablePassthrough } from \"@langchain/core/runnables\";\n\nasync function extractor(url) {\n  function getURL() {\n    var url = \"\";\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      var currTab = tabs[0];\n      url = currTab.url;\n      console.log(\"Current tab URL:\", url);\n    });\n    return url;\n  }\n  var input = getURL();\n  //\"https://www.bbc.com/news/world-europe-68323366\";\n\n  var article = \"\";\n  // here we use top-level await, assume current platform supports it\n  try {\n    article = await extract(input);\n  } catch (err) {\n    console.error(err);\n  }\n\n  //console.log(article);\n\n  let curr_article = {\n    title: article.title,\n    author: article.author,\n    publish_date: article.published,\n    content: article.content,\n    topics: [],\n    genre: \"\",\n    key_word_search: \"\",\n  };\n  console.log(\"curr:\");\n  console.log(curr_article);\n\n  const openAIAPIKey = \"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\";\n  const embeddings = new OpenAIEmbeddings({ openAIApiKey: openAIAPIKey });\n\n  const llm = new ChatOpenAI({ openAIApiKey: openAIAPIKey });\n\n  const testTemplate =\n    \"given the content of the file, only produce the content as a string without the html tags and tabs. \\\n                        Include a list of topics discussed in the article.    \\\n                        Also identify the genre of the article (e.g. political, health, science)      \\\n                        Come up with a 5 key word search for google to find out more information about the article. \\\n                        Format the output in json to be a dictionary containing content (content), topics (topic), genre (genre), \\\n                        and one sentence to inquire further about the article (key_word_search).\\\n                        The variable names are defined in parentheses for each entry in the dictionary. \\\n                        The content will be a string, topics will be a list of a string of topics, \\\n                        genre will be a string, and the key_word_search will be a string. file:{file} article:\";\n\n  const testPrompt = PromptTemplate.fromTemplate(testTemplate);\n  const testchain = RunnableSequence.from([\n    testPrompt,\n    llm,\n    new StringOutputParser(),\n  ]);\n\n  const response = await testchain.invoke({ file: article.content });\n\n  console.log(response);\n\n  var output = JSON.parse(response);\n\n  // console.log(output);\n  // console.log(output.content);\n  // console.log(output.topics);\n\n  curr_article.content = output.content;\n  curr_article.topics = output.topics;\n  curr_article.genre = output.genre;\n  curr_article.key_word_search = output.key_word_search;\n  console.log(\"final\");\n  console.log(curr_article);\n}\n\nexport default extractor;\n"],"mappings":"AAAA;AACA,SAASA,OAAO,QAAQ,8BAA8B;AACtD,SAASC,cAAc,QAAQ,yBAAyB;AACxD,SAASC,UAAU,QAAQ,mBAAmB;AAC9C,SAASC,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,kBAAkB,QAAQ,gCAAgC;AACnE,SAASC,gBAAgB,QAAQ,2BAA2B;AAC5D,SAASC,mBAAmB,QAAQ,2BAA2B;AAE/D,eAAeC,SAASA,CAACC,GAAG,EAAE;EAC5B,SAASC,MAAMA,CAAA,EAAG;IAChB,IAAID,GAAG,GAAG,EAAE;IACZE,MAAM,CAACC,IAAI,CAACC,KAAK,CAAC;MAAEC,MAAM,EAAE,IAAI;MAAEC,aAAa,EAAE;IAAK,CAAC,EAAGH,IAAI,IAAK;MACjE,IAAII,OAAO,GAAGJ,IAAI,CAAC,CAAC,CAAC;MACrBH,GAAG,GAAGO,OAAO,CAACP,GAAG;MACjBQ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAET,GAAG,CAAC;IACtC,CAAC,CAAC;IACF,OAAOA,GAAG;EACZ;EACA,IAAIU,KAAK,GAAGT,MAAM,CAAC,CAAC;EACpB;;EAEA,IAAIU,OAAO,GAAG,EAAE;EAChB;EACA,IAAI;IACFA,OAAO,GAAG,MAAMnB,OAAO,CAACkB,KAAK,CAAC;EAChC,CAAC,CAAC,OAAOE,GAAG,EAAE;IACZJ,OAAO,CAACK,KAAK,CAACD,GAAG,CAAC;EACpB;;EAEA;;EAEA,IAAIE,YAAY,GAAG;IACjBC,KAAK,EAAEJ,OAAO,CAACI,KAAK;IACpBC,MAAM,EAAEL,OAAO,CAACK,MAAM;IACtBC,YAAY,EAAEN,OAAO,CAACO,SAAS;IAC/BC,OAAO,EAAER,OAAO,CAACQ,OAAO;IACxBC,MAAM,EAAE,EAAE;IACVC,KAAK,EAAE,EAAE;IACTC,eAAe,EAAE;EACnB,CAAC;EACDd,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACpBD,OAAO,CAACC,GAAG,CAACK,YAAY,CAAC;EAEzB,MAAMS,YAAY,GAAG,qDAAqD;EAC1E,MAAMC,UAAU,GAAG,IAAI7B,gBAAgB,CAAC;IAAE8B,YAAY,EAAEF;EAAa,CAAC,CAAC;EAEvE,MAAMG,GAAG,GAAG,IAAIhC,UAAU,CAAC;IAAE+B,YAAY,EAAEF;EAAa,CAAC,CAAC;EAE1D,MAAMI,YAAY,GAChB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+GAA+G;EAE7G,MAAMC,UAAU,GAAGnC,cAAc,CAACoC,YAAY,CAACF,YAAY,CAAC;EAC5D,MAAMG,SAAS,GAAGjC,gBAAgB,CAACkC,IAAI,CAAC,CACtCH,UAAU,EACVF,GAAG,EACH,IAAI9B,kBAAkB,CAAC,CAAC,CACzB,CAAC;EAEF,MAAMoC,QAAQ,GAAG,MAAMF,SAAS,CAACG,MAAM,CAAC;IAAEC,IAAI,EAAEvB,OAAO,CAACQ;EAAQ,CAAC,CAAC;EAElEX,OAAO,CAACC,GAAG,CAACuB,QAAQ,CAAC;EAErB,IAAIG,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;;EAEjC;EACA;EACA;;EAEAlB,YAAY,CAACK,OAAO,GAAGgB,MAAM,CAAChB,OAAO;EACrCL,YAAY,CAACM,MAAM,GAAGe,MAAM,CAACf,MAAM;EACnCN,YAAY,CAACO,KAAK,GAAGc,MAAM,CAACd,KAAK;EACjCP,YAAY,CAACQ,eAAe,GAAGa,MAAM,CAACb,eAAe;EACrDd,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;EACpBD,OAAO,CAACC,GAAG,CAACK,YAAY,CAAC;AAC3B;AAEA,eAAef,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}