{"ast":null,"code":"/**\n * This function generates an endpoint URL for (Azure) OpenAI\n * based on the configuration parameters provided.\n *\n * @param {OpenAIEndpointConfig} config - The configuration object for the (Azure) endpoint.\n *\n * @property {string} config.azureOpenAIApiDeploymentName - The deployment name of Azure OpenAI.\n * @property {string} config.azureOpenAIApiInstanceName - The instance name of Azure OpenAI.\n * @property {string} config.azureOpenAIApiKey - The API Key for Azure OpenAI.\n * @property {string} config.azureOpenAIBasePath - The base path for Azure OpenAI.\n * @property {string} config.baseURL - Some other custom base path URL.\n *\n * The function operates as follows:\n * - If both `azureOpenAIBasePath` and `azureOpenAIApiDeploymentName` (plus `azureOpenAIApiKey`) are provided, it returns an URL combining these two parameters (`${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`).\n * - If `azureOpenAIApiKey` is provided, it checks for `azureOpenAIApiInstanceName` and `azureOpenAIApiDeploymentName` and throws an error if any of these is missing. If both are provided, it generates an URL incorporating these parameters.\n * - If none of the above conditions are met, return any custom `baseURL`.\n * - The function returns the generated URL as a string, or undefined if no custom paths are specified.\n *\n * @throws Will throw an error if the necessary parameters for generating the URL are missing.\n *\n * @returns {string | undefined} The generated (Azure) OpenAI endpoint URL.\n */\nexport function getEndpoint(config) {\n  const {\n    azureOpenAIApiDeploymentName,\n    azureOpenAIApiInstanceName,\n    azureOpenAIApiKey,\n    azureOpenAIBasePath,\n    baseURL\n  } = config;\n  if (azureOpenAIApiKey && azureOpenAIBasePath && azureOpenAIApiDeploymentName) {\n    return \"\".concat(azureOpenAIBasePath, \"/\").concat(azureOpenAIApiDeploymentName);\n  }\n  if (azureOpenAIApiKey) {\n    if (!azureOpenAIApiInstanceName) {\n      throw new Error(\"azureOpenAIApiInstanceName is required when using azureOpenAIApiKey\");\n    }\n    if (!azureOpenAIApiDeploymentName) {\n      throw new Error(\"azureOpenAIApiDeploymentName is a required parameter when using azureOpenAIApiKey\");\n    }\n    return \"https://\".concat(azureOpenAIApiInstanceName, \".openai.azure.com/openai/deployments/\").concat(azureOpenAIApiDeploymentName);\n  }\n  return baseURL;\n}","map":{"version":3,"names":["getEndpoint","config","azureOpenAIApiDeploymentName","azureOpenAIApiInstanceName","azureOpenAIApiKey","azureOpenAIBasePath","baseURL","concat","Error"],"sources":["/Users/mandylin/Desktop/WebCrack React 2/webcrack/node_modules/@langchain/openai/dist/utils/azure.js"],"sourcesContent":["/**\n * This function generates an endpoint URL for (Azure) OpenAI\n * based on the configuration parameters provided.\n *\n * @param {OpenAIEndpointConfig} config - The configuration object for the (Azure) endpoint.\n *\n * @property {string} config.azureOpenAIApiDeploymentName - The deployment name of Azure OpenAI.\n * @property {string} config.azureOpenAIApiInstanceName - The instance name of Azure OpenAI.\n * @property {string} config.azureOpenAIApiKey - The API Key for Azure OpenAI.\n * @property {string} config.azureOpenAIBasePath - The base path for Azure OpenAI.\n * @property {string} config.baseURL - Some other custom base path URL.\n *\n * The function operates as follows:\n * - If both `azureOpenAIBasePath` and `azureOpenAIApiDeploymentName` (plus `azureOpenAIApiKey`) are provided, it returns an URL combining these two parameters (`${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`).\n * - If `azureOpenAIApiKey` is provided, it checks for `azureOpenAIApiInstanceName` and `azureOpenAIApiDeploymentName` and throws an error if any of these is missing. If both are provided, it generates an URL incorporating these parameters.\n * - If none of the above conditions are met, return any custom `baseURL`.\n * - The function returns the generated URL as a string, or undefined if no custom paths are specified.\n *\n * @throws Will throw an error if the necessary parameters for generating the URL are missing.\n *\n * @returns {string | undefined} The generated (Azure) OpenAI endpoint URL.\n */\nexport function getEndpoint(config) {\n    const { azureOpenAIApiDeploymentName, azureOpenAIApiInstanceName, azureOpenAIApiKey, azureOpenAIBasePath, baseURL, } = config;\n    if (azureOpenAIApiKey &&\n        azureOpenAIBasePath &&\n        azureOpenAIApiDeploymentName) {\n        return `${azureOpenAIBasePath}/${azureOpenAIApiDeploymentName}`;\n    }\n    if (azureOpenAIApiKey) {\n        if (!azureOpenAIApiInstanceName) {\n            throw new Error(\"azureOpenAIApiInstanceName is required when using azureOpenAIApiKey\");\n        }\n        if (!azureOpenAIApiDeploymentName) {\n            throw new Error(\"azureOpenAIApiDeploymentName is a required parameter when using azureOpenAIApiKey\");\n        }\n        return `https://${azureOpenAIApiInstanceName}.openai.azure.com/openai/deployments/${azureOpenAIApiDeploymentName}`;\n    }\n    return baseURL;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,WAAWA,CAACC,MAAM,EAAE;EAChC,MAAM;IAAEC,4BAA4B;IAAEC,0BAA0B;IAAEC,iBAAiB;IAAEC,mBAAmB;IAAEC;EAAS,CAAC,GAAGL,MAAM;EAC7H,IAAIG,iBAAiB,IACjBC,mBAAmB,IACnBH,4BAA4B,EAAE;IAC9B,UAAAK,MAAA,CAAUF,mBAAmB,OAAAE,MAAA,CAAIL,4BAA4B;EACjE;EACA,IAAIE,iBAAiB,EAAE;IACnB,IAAI,CAACD,0BAA0B,EAAE;MAC7B,MAAM,IAAIK,KAAK,CAAC,qEAAqE,CAAC;IAC1F;IACA,IAAI,CAACN,4BAA4B,EAAE;MAC/B,MAAM,IAAIM,KAAK,CAAC,mFAAmF,CAAC;IACxG;IACA,kBAAAD,MAAA,CAAkBJ,0BAA0B,2CAAAI,MAAA,CAAwCL,4BAA4B;EACpH;EACA,OAAOI,OAAO;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}