{"ast":null,"code":"// utils -> parseFromHtml\n\nimport { stripTags, truncate, unique, pipe } from 'bellajs';\nimport { purify, cleanify } from './html.js';\nimport { isValid as isValidUrl, purify as purifyUrl, absolutify as absolutifyUrl, normalize as normalizeUrls, chooseBestUrl, getDomain } from './linker.js';\nimport extractMetaData from './extractMetaData.js';\nimport extractWithReadability, { extractTitleWithReadability } from './extractWithReadability.js';\nimport { execPreParser, execPostParser } from './transformation.js';\nimport getTimeToRead from './getTimeToRead.js';\nconst summarize = (desc, txt, threshold, maxlen) => {\n  // eslint-disable-line\n  return desc.length > threshold ? desc : truncate(txt, maxlen).replace(/\\n/g, ' ');\n};\nexport default (async function (inputHtml) {\n  let inputUrl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  let parserOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const html = purify(inputHtml);\n  const meta = extractMetaData(html);\n  let title = meta.title;\n  const {\n    url,\n    shortlink,\n    amphtml,\n    canonical,\n    description: metaDesc,\n    image: metaImg,\n    author,\n    published,\n    favicon: metaFav,\n    type\n  } = meta;\n  const {\n    wordsPerMinute = 300,\n    descriptionTruncateLen = 210,\n    descriptionLengthThreshold = 180,\n    contentLengthThreshold = 200\n  } = parserOptions;\n\n  // gather title\n  if (!title) {\n    title = extractTitleWithReadability(html, inputUrl);\n  }\n  if (!title) {\n    return null;\n  }\n\n  // gather urls to choose the best url later\n  const links = unique([url, shortlink, amphtml, canonical, inputUrl].filter(isValidUrl).map(purifyUrl));\n  if (!links.length) {\n    return null;\n  }\n\n  // choose the best url, which one looks like title the most\n  const bestUrl = chooseBestUrl(links, title);\n  const fns = pipe(input => {\n    return normalizeUrls(input, bestUrl);\n  }, input => {\n    return execPreParser(input, links);\n  }, input => {\n    return extractWithReadability(input, bestUrl);\n  }, input => {\n    return input ? execPostParser(input, links) : null;\n  }, input => {\n    return input ? cleanify(input) : null;\n  });\n  const content = fns(html);\n  if (!content) {\n    return null;\n  }\n  const textContent = stripTags(content);\n  if (textContent.length < contentLengthThreshold) {\n    return null;\n  }\n  const description = summarize(metaDesc, textContent, descriptionLengthThreshold, descriptionTruncateLen);\n  const image = metaImg ? absolutifyUrl(bestUrl, metaImg) : '';\n  const favicon = metaFav ? absolutifyUrl(bestUrl, metaFav) : '';\n  return {\n    url: bestUrl,\n    title,\n    description,\n    links,\n    image,\n    content,\n    author,\n    favicon,\n    source: getDomain(bestUrl),\n    published,\n    ttr: getTimeToRead(textContent, wordsPerMinute),\n    type\n  };\n});","map":{"version":3,"names":["stripTags","truncate","unique","pipe","purify","cleanify","isValid","isValidUrl","purifyUrl","absolutify","absolutifyUrl","normalize","normalizeUrls","chooseBestUrl","getDomain","extractMetaData","extractWithReadability","extractTitleWithReadability","execPreParser","execPostParser","getTimeToRead","summarize","desc","txt","threshold","maxlen","length","replace","inputHtml","inputUrl","arguments","undefined","parserOptions","html","meta","title","url","shortlink","amphtml","canonical","description","metaDesc","image","metaImg","author","published","favicon","metaFav","type","wordsPerMinute","descriptionTruncateLen","descriptionLengthThreshold","contentLengthThreshold","links","filter","map","bestUrl","fns","input","content","textContent","source","ttr"],"sources":["/Users/mandylin/Desktop/WebCrack React/webcrack/node_modules/@extractus/article-extractor/src/utils/parseFromHtml.js"],"sourcesContent":["// utils -> parseFromHtml\n\nimport { stripTags, truncate, unique, pipe } from 'bellajs'\n\nimport { purify, cleanify } from './html.js'\n\nimport {\n  isValid as isValidUrl,\n  purify as purifyUrl,\n  absolutify as absolutifyUrl,\n  normalize as normalizeUrls,\n  chooseBestUrl,\n  getDomain\n} from './linker.js'\n\nimport extractMetaData from './extractMetaData.js'\n\nimport extractWithReadability, {\n  extractTitleWithReadability\n} from './extractWithReadability.js'\n\nimport { execPreParser, execPostParser } from './transformation.js'\n\nimport getTimeToRead from './getTimeToRead.js'\n\nconst summarize = (desc, txt, threshold, maxlen) => { // eslint-disable-line\n  return desc.length > threshold\n    ? desc\n    : truncate(txt, maxlen).replace(/\\n/g, ' ')\n}\n\nexport default async (inputHtml, inputUrl = '', parserOptions = {}) => {\n  const html = purify(inputHtml)\n  const meta = extractMetaData(html)\n\n  let title = meta.title\n\n  const {\n    url,\n    shortlink,\n    amphtml,\n    canonical,\n    description: metaDesc,\n    image: metaImg,\n    author,\n    published,\n    favicon: metaFav,\n    type,\n  } = meta\n\n  const {\n    wordsPerMinute = 300,\n    descriptionTruncateLen = 210,\n    descriptionLengthThreshold = 180,\n    contentLengthThreshold = 200,\n  } = parserOptions\n\n  // gather title\n  if (!title) {\n    title = extractTitleWithReadability(html, inputUrl)\n  }\n  if (!title) {\n    return null\n  }\n\n  // gather urls to choose the best url later\n  const links = unique(\n    [url, shortlink, amphtml, canonical, inputUrl]\n      .filter(isValidUrl)\n      .map(purifyUrl)\n  )\n\n  if (!links.length) {\n    return null\n  }\n\n  // choose the best url, which one looks like title the most\n  const bestUrl = chooseBestUrl(links, title)\n\n  const fns = pipe(\n    (input) => {\n      return normalizeUrls(input, bestUrl)\n    },\n    (input) => {\n      return execPreParser(input, links)\n    },\n    (input) => {\n      return extractWithReadability(input, bestUrl)\n    },\n    (input) => {\n      return input ? execPostParser(input, links) : null\n    },\n    (input) => {\n      return input ? cleanify(input) : null\n    }\n  )\n\n  const content = fns(html)\n\n  if (!content) {\n    return null\n  }\n\n  const textContent = stripTags(content)\n  if (textContent.length < contentLengthThreshold) {\n    return null\n  }\n\n  const description = summarize(\n    metaDesc,\n    textContent,\n    descriptionLengthThreshold,\n    descriptionTruncateLen\n  )\n\n  const image = metaImg ? absolutifyUrl(bestUrl, metaImg) : ''\n  const favicon = metaFav ? absolutifyUrl(bestUrl, metaFav) : ''\n\n  return {\n    url: bestUrl,\n    title,\n    description,\n    links,\n    image,\n    content,\n    author,\n    favicon,\n    source: getDomain(bestUrl),\n    published,\n    ttr: getTimeToRead(textContent, wordsPerMinute),\n    type,\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}