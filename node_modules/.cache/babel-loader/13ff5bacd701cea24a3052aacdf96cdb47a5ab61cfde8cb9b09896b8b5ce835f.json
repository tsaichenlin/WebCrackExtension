{"ast":null,"code":"import{PromptTemplate}from\"@langchain/core/prompts\";import{ChatOpenAI}from\"@langchain/openai\";import{StringOutputParser}from\"@langchain/core/output_parsers\";//\nimport{RunnableSequence}from\"@langchain/core/runnables\";//\nexport async function relatedURls(b){const googleBeginningQuerry=\"https://www.google.com/search?q=\";const modifyiedURL=googleBeginningQuerry+b.key_word_search.replace(\" \",\"+\");const a=await fetch(modifyiedURL).then(response=>response.text()).then(html=>{//const URLRegEx = new RegExp('<a href=\"/url.*?&', 'g');\nconst URLRegEx=new RegExp('<a href=\"/url.q=https://www(.*?&)',\"g\");//console.log(html);\nconst author=b.author;const rawURL=author.substring(0,author.indexOf(\"/\",author.indexOf(\"/\",author.indexOf(\"/\")+1)+1));const a=html.match(URLRegEx);const companyRegex=new RegExp(rawURL);var q=[];for(let c in a){if(!companyRegex.test(a[c])){q.push(a[c].substring(16,a[c].length-1));}}return q;}).catch(error=>console.error(\"Error fetching HTML:\",error));const openAIAPIKey=\"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\";const llm=new ChatOpenAI({openAIApiKey:openAIAPIKey});const testTemplate=\"which 3 articles from a list of urls (list) \\\n                            give the most diverse perspectives in terms of political bias, legal, finantial etc.\\\n                            and give a 1 sentence explain why for each indivisaual one differs fromt the other articles\\\n                            Format the output in json to be a dictionary containing URLs (URLs), Explinations (Explinations)\\\n                            The variable names are defined in parentheses for each entry in the dictionary. \\\n                            The URLs will be a list of strings and Explinations will be a list of strings, \\\n                            main:{file}, list:{list} \";const testPrompt=PromptTemplate.fromTemplate(testTemplate);const testchain=RunnableSequence.from([testPrompt,llm,new StringOutputParser()]);return await testchain.invoke({file:b.content,list:a});}","map":{"version":3,"names":["PromptTemplate","ChatOpenAI","StringOutputParser","RunnableSequence","relatedURls","b","googleBeginningQuerry","modifyiedURL","key_word_search","replace","a","fetch","then","response","text","html","URLRegEx","RegExp","author","rawURL","substring","indexOf","match","companyRegex","q","c","test","push","length","catch","error","console","openAIAPIKey","llm","openAIApiKey","testTemplate","testPrompt","fromTemplate","testchain","from","invoke","file","content","list"],"sources":["/Users/mandylin/Desktop/WebCrack React 2/webcrack/src/getRelatedArticles.js"],"sourcesContent":["import { PromptTemplate } from \"@langchain/core/prompts\";\nimport { ChatOpenAI } from \"@langchain/openai\";\nimport { StringOutputParser } from \"@langchain/core/output_parsers\"; //\nimport { RunnableSequence } from \"@langchain/core/runnables\"; //\n\nexport async function relatedURls(b) {\n  const googleBeginningQuerry = \"https://www.google.com/search?q=\";\n  const modifyiedURL =\n    googleBeginningQuerry + b.key_word_search.replace(\" \", \"+\");\n  const a = await fetch(modifyiedURL)\n    .then((response) => response.text())\n    .then((html) => {\n      //const URLRegEx = new RegExp('<a href=\"/url.*?&', 'g');\n      const URLRegEx = new RegExp('<a href=\"/url.q=https://www(.*?&)', \"g\");\n      //console.log(html);\n      const author = b.author;\n      const rawURL = author.substring(\n        0,\n        author.indexOf(\"/\", author.indexOf(\"/\", author.indexOf(\"/\") + 1) + 1)\n      );\n      const a = html.match(URLRegEx);\n      const companyRegex = new RegExp(rawURL);\n      var q = [];\n      for (let c in a) {\n        if (!companyRegex.test(a[c])) {\n          q.push(a[c].substring(16, a[c].length - 1));\n        }\n      }\n      return q;\n    })\n    .catch((error) => console.error(\"Error fetching HTML:\", error));\n  const openAIAPIKey = \"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\";\n\n  const llm = new ChatOpenAI({ openAIApiKey: openAIAPIKey });\n\n  const testTemplate =\n    \"which 3 articles from a list of urls (list) \\\n                            give the most diverse perspectives in terms of political bias, legal, finantial etc.\\\n                            and give a 1 sentence explain why for each indivisaual one differs fromt the other articles\\\n                            Format the output in json to be a dictionary containing URLs (URLs), Explinations (Explinations)\\\n                            The variable names are defined in parentheses for each entry in the dictionary. \\\n                            The URLs will be a list of strings and Explinations will be a list of strings, \\\n                            main:{file}, list:{list} \";\n\n  const testPrompt = PromptTemplate.fromTemplate(testTemplate);\n  const testchain = RunnableSequence.from([\n    testPrompt,\n    llm,\n    new StringOutputParser(),\n  ]);\n\n  return await testchain.invoke({ file: b.content, list: a });\n}\n"],"mappings":"AAAA,OAASA,cAAc,KAAQ,yBAAyB,CACxD,OAASC,UAAU,KAAQ,mBAAmB,CAC9C,OAASC,kBAAkB,KAAQ,gCAAgC,CAAE;AACrE,OAASC,gBAAgB,KAAQ,2BAA2B,CAAE;AAE9D,MAAO,eAAe,CAAAC,WAAWA,CAACC,CAAC,CAAE,CACnC,KAAM,CAAAC,qBAAqB,CAAG,kCAAkC,CAChE,KAAM,CAAAC,YAAY,CAChBD,qBAAqB,CAAGD,CAAC,CAACG,eAAe,CAACC,OAAO,CAAC,GAAG,CAAE,GAAG,CAAC,CAC7D,KAAM,CAAAC,CAAC,CAAG,KAAM,CAAAC,KAAK,CAACJ,YAAY,CAAC,CAChCK,IAAI,CAAEC,QAAQ,EAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,EAAK,CACd;AACA,KAAM,CAAAC,QAAQ,CAAG,GAAI,CAAAC,MAAM,CAAC,mCAAmC,CAAE,GAAG,CAAC,CACrE;AACA,KAAM,CAAAC,MAAM,CAAGb,CAAC,CAACa,MAAM,CACvB,KAAM,CAAAC,MAAM,CAAGD,MAAM,CAACE,SAAS,CAC7B,CAAC,CACDF,MAAM,CAACG,OAAO,CAAC,GAAG,CAAEH,MAAM,CAACG,OAAO,CAAC,GAAG,CAAEH,MAAM,CAACG,OAAO,CAAC,GAAG,CAAC,CAAG,CAAC,CAAC,CAAG,CAAC,CACtE,CAAC,CACD,KAAM,CAAAX,CAAC,CAAGK,IAAI,CAACO,KAAK,CAACN,QAAQ,CAAC,CAC9B,KAAM,CAAAO,YAAY,CAAG,GAAI,CAAAN,MAAM,CAACE,MAAM,CAAC,CACvC,GAAI,CAAAK,CAAC,CAAG,EAAE,CACV,IAAK,GAAI,CAAAC,CAAC,GAAI,CAAAf,CAAC,CAAE,CACf,GAAI,CAACa,YAAY,CAACG,IAAI,CAAChB,CAAC,CAACe,CAAC,CAAC,CAAC,CAAE,CAC5BD,CAAC,CAACG,IAAI,CAACjB,CAAC,CAACe,CAAC,CAAC,CAACL,SAAS,CAAC,EAAE,CAAEV,CAAC,CAACe,CAAC,CAAC,CAACG,MAAM,CAAG,CAAC,CAAC,CAAC,CAC7C,CACF,CACA,MAAO,CAAAJ,CAAC,CACV,CAAC,CAAC,CACDK,KAAK,CAAEC,KAAK,EAAKC,OAAO,CAACD,KAAK,CAAC,sBAAsB,CAAEA,KAAK,CAAC,CAAC,CACjE,KAAM,CAAAE,YAAY,CAAG,qDAAqD,CAE1E,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAhC,UAAU,CAAC,CAAEiC,YAAY,CAAEF,YAAa,CAAC,CAAC,CAE1D,KAAM,CAAAG,YAAY,CAChB;AACJ;AACA;AACA;AACA;AACA;AACA,sDAAsD,CAEpD,KAAM,CAAAC,UAAU,CAAGpC,cAAc,CAACqC,YAAY,CAACF,YAAY,CAAC,CAC5D,KAAM,CAAAG,SAAS,CAAGnC,gBAAgB,CAACoC,IAAI,CAAC,CACtCH,UAAU,CACVH,GAAG,CACH,GAAI,CAAA/B,kBAAkB,CAAC,CAAC,CACzB,CAAC,CAEF,MAAO,MAAM,CAAAoC,SAAS,CAACE,MAAM,CAAC,CAAEC,IAAI,CAAEpC,CAAC,CAACqC,OAAO,CAAEC,IAAI,CAAEjC,CAAE,CAAC,CAAC,CAC7D"},"metadata":{},"sourceType":"module","externalDependencies":[]}