{"ast":null,"code":"import { OpenAI as OpenAIClient } from \"openai\";\nimport { calculateMaxTokens } from \"@langchain/core/language_models/base\";\nimport { GenerationChunk } from \"@langchain/core/outputs\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { BaseLLM } from \"@langchain/core/language_models/llms\";\nimport { chunkArray } from \"@langchain/core/utils/chunk_array\";\nimport { getEndpoint } from \"./utils/azure.js\";\nimport { OpenAIChat } from \"./legacy.js\";\nimport { wrapOpenAIClientError } from \"./utils/openai.js\";\nexport { OpenAIChat };\n/**\n * Wrapper around OpenAI large language models.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/completions/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n * @example\n * ```typescript\n * const model = new OpenAI({\n *   modelName: \"gpt-4\",\n *   temperature: 0.7,\n *   maxTokens: 1000,\n *   maxRetries: 5,\n * });\n *\n * const res = await model.call(\n *   \"Question: What would be a good company name for a company that makes colorful socks?\\nAnswer:\"\n * );\n * console.log({ res });\n * ```\n */\nexport class OpenAI extends BaseLLM {\n  static lc_name() {\n    return \"OpenAI\";\n  }\n  get callKeys() {\n    return [...super.callKeys, \"options\"];\n  }\n  get lc_secrets() {\n    return {\n      openAIApiKey: \"OPENAI_API_KEY\",\n      azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n      organization: \"OPENAI_ORGANIZATION\"\n    };\n  }\n  get lc_aliases() {\n    return {\n      modelName: \"model\",\n      openAIApiKey: \"openai_api_key\",\n      azureOpenAIApiVersion: \"azure_openai_api_version\",\n      azureOpenAIApiKey: \"azure_openai_api_key\",\n      azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n      azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\"\n    };\n  }\n  constructor(fields, /** @deprecated */\n  configuration) {\n    if ((fields?.modelName?.startsWith(\"gpt-3.5-turbo\") || fields?.modelName?.startsWith(\"gpt-4\")) && !fields?.modelName?.includes(\"-instruct\")) {\n      // eslint-disable-next-line no-constructor-return\n      return new OpenAIChat(fields, configuration);\n    }\n    super(fields ?? {});\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"temperature\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0.7\n    });\n    Object.defineProperty(this, \"maxTokens\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 256\n    });\n    Object.defineProperty(this, \"topP\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"frequencyPenalty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"presencePenalty\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 0\n    });\n    Object.defineProperty(this, \"n\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 1\n    });\n    Object.defineProperty(this, \"bestOf\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"logitBias\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"modelName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: \"gpt-3.5-turbo-instruct\"\n    });\n    Object.defineProperty(this, \"modelKwargs\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"batchSize\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: 20\n    });\n    Object.defineProperty(this, \"timeout\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"stop\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"user\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"streaming\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: false\n    });\n    Object.defineProperty(this, \"openAIApiKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiKey\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"azureOpenAIBasePath\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"organization\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"client\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"clientConfig\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.openAIApiKey = fields?.openAIApiKey ?? getEnvironmentVariable(\"OPENAI_API_KEY\");\n    this.azureOpenAIApiKey = fields?.azureOpenAIApiKey ?? getEnvironmentVariable(\"AZURE_OPENAI_API_KEY\");\n    if (!this.azureOpenAIApiKey && !this.openAIApiKey) {\n      throw new Error(\"OpenAI or Azure OpenAI API key not found\");\n    }\n    this.azureOpenAIApiInstanceName = fields?.azureOpenAIApiInstanceName ?? getEnvironmentVariable(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n    this.azureOpenAIApiDeploymentName = (fields?.azureOpenAIApiCompletionsDeploymentName || fields?.azureOpenAIApiDeploymentName) ?? (getEnvironmentVariable(\"AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME\") || getEnvironmentVariable(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n    this.azureOpenAIApiVersion = fields?.azureOpenAIApiVersion ?? getEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\");\n    this.azureOpenAIBasePath = fields?.azureOpenAIBasePath ?? getEnvironmentVariable(\"AZURE_OPENAI_BASE_PATH\");\n    this.organization = fields?.configuration?.organization ?? getEnvironmentVariable(\"OPENAI_ORGANIZATION\");\n    this.modelName = fields?.modelName ?? this.modelName;\n    this.modelKwargs = fields?.modelKwargs ?? {};\n    this.batchSize = fields?.batchSize ?? this.batchSize;\n    this.timeout = fields?.timeout;\n    this.temperature = fields?.temperature ?? this.temperature;\n    this.maxTokens = fields?.maxTokens ?? this.maxTokens;\n    this.topP = fields?.topP ?? this.topP;\n    this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n    this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n    this.n = fields?.n ?? this.n;\n    this.bestOf = fields?.bestOf ?? this.bestOf;\n    this.logitBias = fields?.logitBias;\n    this.stop = fields?.stop;\n    this.user = fields?.user;\n    this.streaming = fields?.streaming ?? false;\n    if (this.streaming && this.bestOf && this.bestOf > 1) {\n      throw new Error(\"Cannot stream results when bestOf > 1\");\n    }\n    if (this.azureOpenAIApiKey) {\n      if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n        throw new Error(\"Azure OpenAI API instance name not found\");\n      }\n      if (!this.azureOpenAIApiDeploymentName) {\n        throw new Error(\"Azure OpenAI API deployment name not found\");\n      }\n      if (!this.azureOpenAIApiVersion) {\n        throw new Error(\"Azure OpenAI API version not found\");\n      }\n      this.openAIApiKey = this.openAIApiKey ?? \"\";\n    }\n    this.clientConfig = {\n      apiKey: this.openAIApiKey,\n      organization: this.organization,\n      baseURL: configuration?.basePath ?? fields?.configuration?.basePath,\n      dangerouslyAllowBrowser: true,\n      defaultHeaders: configuration?.baseOptions?.headers ?? fields?.configuration?.baseOptions?.headers,\n      defaultQuery: configuration?.baseOptions?.params ?? fields?.configuration?.baseOptions?.params,\n      ...configuration,\n      ...fields?.configuration\n    };\n  }\n  /**\n   * Get the parameters used to invoke the model\n   */\n  invocationParams(options) {\n    return {\n      model: this.modelName,\n      temperature: this.temperature,\n      max_tokens: this.maxTokens,\n      top_p: this.topP,\n      frequency_penalty: this.frequencyPenalty,\n      presence_penalty: this.presencePenalty,\n      n: this.n,\n      best_of: this.bestOf,\n      logit_bias: this.logitBias,\n      stop: options?.stop ?? this.stop,\n      user: this.user,\n      stream: this.streaming,\n      ...this.modelKwargs\n    };\n  }\n  /** @ignore */\n  _identifyingParams() {\n    return {\n      model_name: this.modelName,\n      ...this.invocationParams(),\n      ...this.clientConfig\n    };\n  }\n  /**\n   * Get the identifying parameters for the model\n   */\n  identifyingParams() {\n    return this._identifyingParams();\n  }\n  /**\n   * Call out to OpenAI's endpoint with k unique prompts\n   *\n   * @param [prompts] - The prompts to pass into the model.\n   * @param [options] - Optional list of stop words to use when generating.\n   * @param [runManager] - Optional callback manager to use when generating.\n   *\n   * @returns The full LLM output.\n   *\n   * @example\n   * ```ts\n   * import { OpenAI } from \"langchain/llms/openai\";\n   * const openai = new OpenAI();\n   * const response = await openai.generate([\"Tell me a joke.\"]);\n   * ```\n   */\n  async _generate(prompts, options, runManager) {\n    const subPrompts = chunkArray(prompts, this.batchSize);\n    const choices = [];\n    const tokenUsage = {};\n    const params = this.invocationParams(options);\n    if (params.max_tokens === -1) {\n      if (prompts.length !== 1) {\n        throw new Error(\"max_tokens set to -1 not supported for multiple inputs\");\n      }\n      params.max_tokens = await calculateMaxTokens({\n        prompt: prompts[0],\n        // Cast here to allow for other models that may not fit the union\n        modelName: this.modelName\n      });\n    }\n    for (let i = 0; i < subPrompts.length; i += 1) {\n      const data = params.stream ? await (async () => {\n        const choices = [];\n        let response;\n        const stream = await this.completionWithRetry({\n          ...params,\n          stream: true,\n          prompt: subPrompts[i]\n        }, options);\n        for await (const message of stream) {\n          // on the first message set the response properties\n          if (!response) {\n            response = {\n              id: message.id,\n              object: message.object,\n              created: message.created,\n              model: message.model\n            };\n          }\n          // on all messages, update choice\n          for (const part of message.choices) {\n            if (!choices[part.index]) {\n              choices[part.index] = part;\n            } else {\n              const choice = choices[part.index];\n              choice.text += part.text;\n              choice.finish_reason = part.finish_reason;\n              choice.logprobs = part.logprobs;\n            }\n            void runManager?.handleLLMNewToken(part.text, {\n              prompt: Math.floor(part.index / this.n),\n              completion: part.index % this.n\n            });\n          }\n        }\n        if (options.signal?.aborted) {\n          throw new Error(\"AbortError\");\n        }\n        return {\n          ...response,\n          choices\n        };\n      })() : await this.completionWithRetry({\n        ...params,\n        stream: false,\n        prompt: subPrompts[i]\n      }, {\n        signal: options.signal,\n        ...options.options\n      });\n      choices.push(...data.choices);\n      const {\n        completion_tokens: completionTokens,\n        prompt_tokens: promptTokens,\n        total_tokens: totalTokens\n      } = data.usage ? data.usage : {\n        completion_tokens: undefined,\n        prompt_tokens: undefined,\n        total_tokens: undefined\n      };\n      if (completionTokens) {\n        tokenUsage.completionTokens = (tokenUsage.completionTokens ?? 0) + completionTokens;\n      }\n      if (promptTokens) {\n        tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n      }\n      if (totalTokens) {\n        tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n      }\n    }\n    const generations = chunkArray(choices, this.n).map(promptChoices => promptChoices.map(choice => ({\n      text: choice.text ?? \"\",\n      generationInfo: {\n        finishReason: choice.finish_reason,\n        logprobs: choice.logprobs\n      }\n    })));\n    return {\n      generations,\n      llmOutput: {\n        tokenUsage\n      }\n    };\n  }\n  // TODO(jacoblee): Refactor with _generate(..., {stream: true}) implementation?\n  async *_streamResponseChunks(input, options, runManager) {\n    const params = {\n      ...this.invocationParams(options),\n      prompt: input,\n      stream: true\n    };\n    const stream = await this.completionWithRetry(params, options);\n    for await (const data of stream) {\n      const choice = data?.choices[0];\n      if (!choice) {\n        continue;\n      }\n      const chunk = new GenerationChunk({\n        text: choice.text,\n        generationInfo: {\n          finishReason: choice.finish_reason\n        }\n      });\n      yield chunk;\n      // eslint-disable-next-line no-void\n      void runManager?.handleLLMNewToken(chunk.text ?? \"\");\n    }\n    if (options.signal?.aborted) {\n      throw new Error(\"AbortError\");\n    }\n  }\n  async completionWithRetry(request, options) {\n    const requestOptions = this._getClientOptions(options);\n    return this.caller.call(async () => {\n      try {\n        const res = await this.client.completions.create(request, requestOptions);\n        return res;\n      } catch (e) {\n        const error = wrapOpenAIClientError(e);\n        throw error;\n      }\n    });\n  }\n  /**\n   * Calls the OpenAI API with retry logic in case of failures.\n   * @param request The request to send to the OpenAI API.\n   * @param options Optional configuration for the API call.\n   * @returns The response from the OpenAI API.\n   */\n  _getClientOptions(options) {\n    if (!this.client) {\n      const openAIEndpointConfig = {\n        azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n        azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n        azureOpenAIApiKey: this.azureOpenAIApiKey,\n        azureOpenAIBasePath: this.azureOpenAIBasePath,\n        baseURL: this.clientConfig.baseURL\n      };\n      const endpoint = getEndpoint(openAIEndpointConfig);\n      const params = {\n        ...this.clientConfig,\n        baseURL: endpoint,\n        timeout: this.timeout,\n        maxRetries: 0\n      };\n      if (!params.baseURL) {\n        delete params.baseURL;\n      }\n      this.client = new OpenAIClient(params);\n    }\n    const requestOptions = {\n      ...this.clientConfig,\n      ...options\n    };\n    if (this.azureOpenAIApiKey) {\n      requestOptions.headers = {\n        \"api-key\": this.azureOpenAIApiKey,\n        ...requestOptions.headers\n      };\n      requestOptions.query = {\n        \"api-version\": this.azureOpenAIApiVersion,\n        ...requestOptions.query\n      };\n    }\n    return requestOptions;\n  }\n  _llmType() {\n    return \"openai\";\n  }\n}","map":{"version":3,"names":["OpenAI","OpenAIClient","calculateMaxTokens","GenerationChunk","getEnvironmentVariable","BaseLLM","chunkArray","getEndpoint","OpenAIChat","wrapOpenAIClientError","lc_name","callKeys","lc_secrets","openAIApiKey","azureOpenAIApiKey","organization","lc_aliases","modelName","azureOpenAIApiVersion","azureOpenAIApiInstanceName","azureOpenAIApiDeploymentName","constructor","fields","configuration","startsWith","includes","Object","defineProperty","enumerable","configurable","writable","value","Error","azureOpenAIApiCompletionsDeploymentName","azureOpenAIBasePath","modelKwargs","batchSize","timeout","temperature","maxTokens","topP","frequencyPenalty","presencePenalty","n","bestOf","logitBias","stop","user","streaming","clientConfig","apiKey","baseURL","basePath","dangerouslyAllowBrowser","defaultHeaders","baseOptions","headers","defaultQuery","params","invocationParams","options","model","max_tokens","top_p","frequency_penalty","presence_penalty","best_of","logit_bias","stream","_identifyingParams","model_name","identifyingParams","_generate","prompts","runManager","subPrompts","choices","tokenUsage","length","prompt","i","data","response","completionWithRetry","message","id","object","created","part","index","choice","text","finish_reason","logprobs","handleLLMNewToken","Math","floor","completion","signal","aborted","push","completion_tokens","completionTokens","prompt_tokens","promptTokens","total_tokens","totalTokens","usage","undefined","generations","map","promptChoices","generationInfo","finishReason","llmOutput","_streamResponseChunks","input","chunk","request","requestOptions","_getClientOptions","caller","call","res","client","completions","create","e","error","openAIEndpointConfig","endpoint","maxRetries","query","_llmType"],"sources":["/Users/mandylin/Desktop/WebCrack React/webcrack/node_modules/@langchain/openai/dist/llms.js"],"sourcesContent":["import { OpenAI as OpenAIClient } from \"openai\";\nimport { calculateMaxTokens } from \"@langchain/core/language_models/base\";\nimport { GenerationChunk } from \"@langchain/core/outputs\";\nimport { getEnvironmentVariable } from \"@langchain/core/utils/env\";\nimport { BaseLLM, } from \"@langchain/core/language_models/llms\";\nimport { chunkArray } from \"@langchain/core/utils/chunk_array\";\nimport { getEndpoint } from \"./utils/azure.js\";\nimport { OpenAIChat } from \"./legacy.js\";\nimport { wrapOpenAIClientError } from \"./utils/openai.js\";\nexport { OpenAIChat };\n/**\n * Wrapper around OpenAI large language models.\n *\n * To use you should have the `openai` package installed, with the\n * `OPENAI_API_KEY` environment variable set.\n *\n * To use with Azure you should have the `openai` package installed, with the\n * `AZURE_OPENAI_API_KEY`,\n * `AZURE_OPENAI_API_INSTANCE_NAME`,\n * `AZURE_OPENAI_API_DEPLOYMENT_NAME`\n * and `AZURE_OPENAI_API_VERSION` environment variable set.\n *\n * @remarks\n * Any parameters that are valid to be passed to {@link\n * https://platform.openai.com/docs/api-reference/completions/create |\n * `openai.createCompletion`} can be passed through {@link modelKwargs}, even\n * if not explicitly available on this class.\n * @example\n * ```typescript\n * const model = new OpenAI({\n *   modelName: \"gpt-4\",\n *   temperature: 0.7,\n *   maxTokens: 1000,\n *   maxRetries: 5,\n * });\n *\n * const res = await model.call(\n *   \"Question: What would be a good company name for a company that makes colorful socks?\\nAnswer:\"\n * );\n * console.log({ res });\n * ```\n */\nexport class OpenAI extends BaseLLM {\n    static lc_name() {\n        return \"OpenAI\";\n    }\n    get callKeys() {\n        return [...super.callKeys, \"options\"];\n    }\n    get lc_secrets() {\n        return {\n            openAIApiKey: \"OPENAI_API_KEY\",\n            azureOpenAIApiKey: \"AZURE_OPENAI_API_KEY\",\n            organization: \"OPENAI_ORGANIZATION\",\n        };\n    }\n    get lc_aliases() {\n        return {\n            modelName: \"model\",\n            openAIApiKey: \"openai_api_key\",\n            azureOpenAIApiVersion: \"azure_openai_api_version\",\n            azureOpenAIApiKey: \"azure_openai_api_key\",\n            azureOpenAIApiInstanceName: \"azure_openai_api_instance_name\",\n            azureOpenAIApiDeploymentName: \"azure_openai_api_deployment_name\",\n        };\n    }\n    constructor(fields, \n    /** @deprecated */\n    configuration) {\n        if ((fields?.modelName?.startsWith(\"gpt-3.5-turbo\") ||\n            fields?.modelName?.startsWith(\"gpt-4\")) &&\n            !fields?.modelName?.includes(\"-instruct\")) {\n            // eslint-disable-next-line no-constructor-return\n            return new OpenAIChat(fields, configuration);\n        }\n        super(fields ?? {});\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"temperature\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0.7\n        });\n        Object.defineProperty(this, \"maxTokens\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 256\n        });\n        Object.defineProperty(this, \"topP\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"frequencyPenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"presencePenalty\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"n\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 1\n        });\n        Object.defineProperty(this, \"bestOf\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"logitBias\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"modelName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: \"gpt-3.5-turbo-instruct\"\n        });\n        Object.defineProperty(this, \"modelKwargs\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"batchSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 20\n        });\n        Object.defineProperty(this, \"timeout\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"stop\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"user\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"streaming\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: false\n        });\n        Object.defineProperty(this, \"openAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiVersion\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiInstanceName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIApiDeploymentName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"azureOpenAIBasePath\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"organization\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"client\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"clientConfig\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.openAIApiKey =\n            fields?.openAIApiKey ?? getEnvironmentVariable(\"OPENAI_API_KEY\");\n        this.azureOpenAIApiKey =\n            fields?.azureOpenAIApiKey ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_KEY\");\n        if (!this.azureOpenAIApiKey && !this.openAIApiKey) {\n            throw new Error(\"OpenAI or Azure OpenAI API key not found\");\n        }\n        this.azureOpenAIApiInstanceName =\n            fields?.azureOpenAIApiInstanceName ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_INSTANCE_NAME\");\n        this.azureOpenAIApiDeploymentName =\n            (fields?.azureOpenAIApiCompletionsDeploymentName ||\n                fields?.azureOpenAIApiDeploymentName) ??\n                (getEnvironmentVariable(\"AZURE_OPENAI_API_COMPLETIONS_DEPLOYMENT_NAME\") ||\n                    getEnvironmentVariable(\"AZURE_OPENAI_API_DEPLOYMENT_NAME\"));\n        this.azureOpenAIApiVersion =\n            fields?.azureOpenAIApiVersion ??\n                getEnvironmentVariable(\"AZURE_OPENAI_API_VERSION\");\n        this.azureOpenAIBasePath =\n            fields?.azureOpenAIBasePath ??\n                getEnvironmentVariable(\"AZURE_OPENAI_BASE_PATH\");\n        this.organization =\n            fields?.configuration?.organization ??\n                getEnvironmentVariable(\"OPENAI_ORGANIZATION\");\n        this.modelName = fields?.modelName ?? this.modelName;\n        this.modelKwargs = fields?.modelKwargs ?? {};\n        this.batchSize = fields?.batchSize ?? this.batchSize;\n        this.timeout = fields?.timeout;\n        this.temperature = fields?.temperature ?? this.temperature;\n        this.maxTokens = fields?.maxTokens ?? this.maxTokens;\n        this.topP = fields?.topP ?? this.topP;\n        this.frequencyPenalty = fields?.frequencyPenalty ?? this.frequencyPenalty;\n        this.presencePenalty = fields?.presencePenalty ?? this.presencePenalty;\n        this.n = fields?.n ?? this.n;\n        this.bestOf = fields?.bestOf ?? this.bestOf;\n        this.logitBias = fields?.logitBias;\n        this.stop = fields?.stop;\n        this.user = fields?.user;\n        this.streaming = fields?.streaming ?? false;\n        if (this.streaming && this.bestOf && this.bestOf > 1) {\n            throw new Error(\"Cannot stream results when bestOf > 1\");\n        }\n        if (this.azureOpenAIApiKey) {\n            if (!this.azureOpenAIApiInstanceName && !this.azureOpenAIBasePath) {\n                throw new Error(\"Azure OpenAI API instance name not found\");\n            }\n            if (!this.azureOpenAIApiDeploymentName) {\n                throw new Error(\"Azure OpenAI API deployment name not found\");\n            }\n            if (!this.azureOpenAIApiVersion) {\n                throw new Error(\"Azure OpenAI API version not found\");\n            }\n            this.openAIApiKey = this.openAIApiKey ?? \"\";\n        }\n        this.clientConfig = {\n            apiKey: this.openAIApiKey,\n            organization: this.organization,\n            baseURL: configuration?.basePath ?? fields?.configuration?.basePath,\n            dangerouslyAllowBrowser: true,\n            defaultHeaders: configuration?.baseOptions?.headers ??\n                fields?.configuration?.baseOptions?.headers,\n            defaultQuery: configuration?.baseOptions?.params ??\n                fields?.configuration?.baseOptions?.params,\n            ...configuration,\n            ...fields?.configuration,\n        };\n    }\n    /**\n     * Get the parameters used to invoke the model\n     */\n    invocationParams(options) {\n        return {\n            model: this.modelName,\n            temperature: this.temperature,\n            max_tokens: this.maxTokens,\n            top_p: this.topP,\n            frequency_penalty: this.frequencyPenalty,\n            presence_penalty: this.presencePenalty,\n            n: this.n,\n            best_of: this.bestOf,\n            logit_bias: this.logitBias,\n            stop: options?.stop ?? this.stop,\n            user: this.user,\n            stream: this.streaming,\n            ...this.modelKwargs,\n        };\n    }\n    /** @ignore */\n    _identifyingParams() {\n        return {\n            model_name: this.modelName,\n            ...this.invocationParams(),\n            ...this.clientConfig,\n        };\n    }\n    /**\n     * Get the identifying parameters for the model\n     */\n    identifyingParams() {\n        return this._identifyingParams();\n    }\n    /**\n     * Call out to OpenAI's endpoint with k unique prompts\n     *\n     * @param [prompts] - The prompts to pass into the model.\n     * @param [options] - Optional list of stop words to use when generating.\n     * @param [runManager] - Optional callback manager to use when generating.\n     *\n     * @returns The full LLM output.\n     *\n     * @example\n     * ```ts\n     * import { OpenAI } from \"langchain/llms/openai\";\n     * const openai = new OpenAI();\n     * const response = await openai.generate([\"Tell me a joke.\"]);\n     * ```\n     */\n    async _generate(prompts, options, runManager) {\n        const subPrompts = chunkArray(prompts, this.batchSize);\n        const choices = [];\n        const tokenUsage = {};\n        const params = this.invocationParams(options);\n        if (params.max_tokens === -1) {\n            if (prompts.length !== 1) {\n                throw new Error(\"max_tokens set to -1 not supported for multiple inputs\");\n            }\n            params.max_tokens = await calculateMaxTokens({\n                prompt: prompts[0],\n                // Cast here to allow for other models that may not fit the union\n                modelName: this.modelName,\n            });\n        }\n        for (let i = 0; i < subPrompts.length; i += 1) {\n            const data = params.stream\n                ? await (async () => {\n                    const choices = [];\n                    let response;\n                    const stream = await this.completionWithRetry({\n                        ...params,\n                        stream: true,\n                        prompt: subPrompts[i],\n                    }, options);\n                    for await (const message of stream) {\n                        // on the first message set the response properties\n                        if (!response) {\n                            response = {\n                                id: message.id,\n                                object: message.object,\n                                created: message.created,\n                                model: message.model,\n                            };\n                        }\n                        // on all messages, update choice\n                        for (const part of message.choices) {\n                            if (!choices[part.index]) {\n                                choices[part.index] = part;\n                            }\n                            else {\n                                const choice = choices[part.index];\n                                choice.text += part.text;\n                                choice.finish_reason = part.finish_reason;\n                                choice.logprobs = part.logprobs;\n                            }\n                            void runManager?.handleLLMNewToken(part.text, {\n                                prompt: Math.floor(part.index / this.n),\n                                completion: part.index % this.n,\n                            });\n                        }\n                    }\n                    if (options.signal?.aborted) {\n                        throw new Error(\"AbortError\");\n                    }\n                    return { ...response, choices };\n                })()\n                : await this.completionWithRetry({\n                    ...params,\n                    stream: false,\n                    prompt: subPrompts[i],\n                }, {\n                    signal: options.signal,\n                    ...options.options,\n                });\n            choices.push(...data.choices);\n            const { completion_tokens: completionTokens, prompt_tokens: promptTokens, total_tokens: totalTokens, } = data.usage\n                ? data.usage\n                : {\n                    completion_tokens: undefined,\n                    prompt_tokens: undefined,\n                    total_tokens: undefined,\n                };\n            if (completionTokens) {\n                tokenUsage.completionTokens =\n                    (tokenUsage.completionTokens ?? 0) + completionTokens;\n            }\n            if (promptTokens) {\n                tokenUsage.promptTokens = (tokenUsage.promptTokens ?? 0) + promptTokens;\n            }\n            if (totalTokens) {\n                tokenUsage.totalTokens = (tokenUsage.totalTokens ?? 0) + totalTokens;\n            }\n        }\n        const generations = chunkArray(choices, this.n).map((promptChoices) => promptChoices.map((choice) => ({\n            text: choice.text ?? \"\",\n            generationInfo: {\n                finishReason: choice.finish_reason,\n                logprobs: choice.logprobs,\n            },\n        })));\n        return {\n            generations,\n            llmOutput: { tokenUsage },\n        };\n    }\n    // TODO(jacoblee): Refactor with _generate(..., {stream: true}) implementation?\n    async *_streamResponseChunks(input, options, runManager) {\n        const params = {\n            ...this.invocationParams(options),\n            prompt: input,\n            stream: true,\n        };\n        const stream = await this.completionWithRetry(params, options);\n        for await (const data of stream) {\n            const choice = data?.choices[0];\n            if (!choice) {\n                continue;\n            }\n            const chunk = new GenerationChunk({\n                text: choice.text,\n                generationInfo: {\n                    finishReason: choice.finish_reason,\n                },\n            });\n            yield chunk;\n            // eslint-disable-next-line no-void\n            void runManager?.handleLLMNewToken(chunk.text ?? \"\");\n        }\n        if (options.signal?.aborted) {\n            throw new Error(\"AbortError\");\n        }\n    }\n    async completionWithRetry(request, options) {\n        const requestOptions = this._getClientOptions(options);\n        return this.caller.call(async () => {\n            try {\n                const res = await this.client.completions.create(request, requestOptions);\n                return res;\n            }\n            catch (e) {\n                const error = wrapOpenAIClientError(e);\n                throw error;\n            }\n        });\n    }\n    /**\n     * Calls the OpenAI API with retry logic in case of failures.\n     * @param request The request to send to the OpenAI API.\n     * @param options Optional configuration for the API call.\n     * @returns The response from the OpenAI API.\n     */\n    _getClientOptions(options) {\n        if (!this.client) {\n            const openAIEndpointConfig = {\n                azureOpenAIApiDeploymentName: this.azureOpenAIApiDeploymentName,\n                azureOpenAIApiInstanceName: this.azureOpenAIApiInstanceName,\n                azureOpenAIApiKey: this.azureOpenAIApiKey,\n                azureOpenAIBasePath: this.azureOpenAIBasePath,\n                baseURL: this.clientConfig.baseURL,\n            };\n            const endpoint = getEndpoint(openAIEndpointConfig);\n            const params = {\n                ...this.clientConfig,\n                baseURL: endpoint,\n                timeout: this.timeout,\n                maxRetries: 0,\n            };\n            if (!params.baseURL) {\n                delete params.baseURL;\n            }\n            this.client = new OpenAIClient(params);\n        }\n        const requestOptions = {\n            ...this.clientConfig,\n            ...options,\n        };\n        if (this.azureOpenAIApiKey) {\n            requestOptions.headers = {\n                \"api-key\": this.azureOpenAIApiKey,\n                ...requestOptions.headers,\n            };\n            requestOptions.query = {\n                \"api-version\": this.azureOpenAIApiVersion,\n                ...requestOptions.query,\n            };\n        }\n        return requestOptions;\n    }\n    _llmType() {\n        return \"openai\";\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}