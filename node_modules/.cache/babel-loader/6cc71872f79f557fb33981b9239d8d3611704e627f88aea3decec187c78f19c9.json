{"ast":null,"code":"// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\nimport { AIMessage, HumanMessage, SystemMessage, BaseMessage, ChatMessage, coerceMessageLikeToMessage, isBaseMessage } from \"../messages/index.js\";\nimport { ChatPromptValue } from \"../prompt_values.js\";\nimport { Runnable } from \"../runnables/base.js\";\nimport { BaseStringPromptTemplate } from \"./string.js\";\nimport { BasePromptTemplate } from \"./base.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nimport { ImagePromptTemplate } from \"./image.js\";\nimport { parseFString } from \"./template.js\";\n/**\n * Abstract class that serves as a base for creating message prompt\n * templates. It defines how to format messages for different roles in a\n * conversation.\n */\nexport class BaseMessagePromptTemplate extends Runnable {\n  constructor() {\n    super(...arguments);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"prompts\", \"chat\"]\n    });\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n  }\n  /**\n   * Calls the formatMessages method with the provided input and options.\n   * @param input Input for the formatMessages method\n   * @param options Optional BaseCallbackConfig\n   * @returns Formatted output messages\n   */\n  async invoke(input, options) {\n    return this._callWithConfig(input => this.formatMessages(input), input, {\n      ...options,\n      runType: \"prompt\"\n    });\n  }\n}\n/**\n * Class that represents a placeholder for messages in a chat prompt. It\n * extends the BaseMessagePromptTemplate.\n */\nexport class MessagesPlaceholder extends BaseMessagePromptTemplate {\n  static lc_name() {\n    return \"MessagesPlaceholder\";\n  }\n  constructor(fields) {\n    var _fields$optional;\n    if (typeof fields === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      fields = {\n        variableName: fields\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"variableName\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"optional\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.variableName = fields.variableName;\n    this.optional = (_fields$optional = fields.optional) !== null && _fields$optional !== void 0 ? _fields$optional : false;\n  }\n  get inputVariables() {\n    return [this.variableName];\n  }\n  validateInputOrThrow(input, variableName) {\n    if (this.optional && !input) {\n      return false;\n    } else if (!input) {\n      const error = new Error(\"Error: Field \\\"\".concat(variableName, \"\\\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: undefined\"));\n      error.name = \"InputFormatError\";\n      throw error;\n    }\n    let isInputBaseMessage = false;\n    if (Array.isArray(input)) {\n      isInputBaseMessage = input.every(message => isBaseMessage(message));\n    } else {\n      isInputBaseMessage = isBaseMessage(input);\n    }\n    if (!isInputBaseMessage) {\n      const readableInput = typeof input === \"string\" ? input : JSON.stringify(input, null, 2);\n      const error = new Error(\"Error: Field \\\"\".concat(variableName, \"\\\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: \").concat(readableInput));\n      error.name = \"InputFormatError\";\n      throw error;\n    }\n    return true;\n  }\n  async formatMessages(values) {\n    var _values$this$variable;\n    this.validateInputOrThrow(values[this.variableName], this.variableName);\n    return (_values$this$variable = values[this.variableName]) !== null && _values$this$variable !== void 0 ? _values$this$variable : [];\n  }\n}\n/**\n * Abstract class that serves as a base for creating message string prompt\n * templates. It extends the BaseMessagePromptTemplate.\n */\nexport class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\n  constructor(fields) {\n    if (!(\"prompt\" in fields)) {\n      // eslint-disable-next-line no-param-reassign\n      fields = {\n        prompt: fields\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"prompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.prompt = fields.prompt;\n  }\n  get inputVariables() {\n    return this.prompt.inputVariables;\n  }\n  async formatMessages(values) {\n    return [await this.format(values)];\n  }\n}\n/**\n * Abstract class that serves as a base for creating chat prompt\n * templates. It extends the BasePromptTemplate.\n */\nexport class BaseChatPromptTemplate extends BasePromptTemplate {\n  constructor(input) {\n    super(input);\n  }\n  async format(values) {\n    return (await this.formatPromptValue(values)).toString();\n  }\n  async formatPromptValue(values) {\n    const resultMessages = await this.formatMessages(values);\n    return new ChatPromptValue(resultMessages);\n  }\n}\n/**\n * Class that represents a chat message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n  static lc_name() {\n    return \"ChatMessagePromptTemplate\";\n  }\n  constructor(fields, role) {\n    if (!(\"prompt\" in fields)) {\n      // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n      fields = {\n        prompt: fields,\n        role: role\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"role\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.role = fields.role;\n  }\n  async format(values) {\n    return new ChatMessage(await this.prompt.format(values), this.role);\n  }\n  static fromTemplate(template, role) {\n    return new this(PromptTemplate.fromTemplate(template), role);\n  }\n}\nclass _StringImageMessagePromptTemplate extends BaseMessagePromptTemplate {\n  static _messageClass() {\n    throw new Error(\"Can not invoke _messageClass from inside _StringImageMessagePromptTemplate\");\n  }\n  constructor( /** @TODO When we come up with a better way to type prompt templates, fix this */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  fields, additionalOptions) {\n    if (!(\"prompt\" in fields)) {\n      // eslint-disable-next-line no-param-reassign\n      fields = {\n        prompt: fields\n      };\n    }\n    super(fields);\n    Object.defineProperty(this, \"lc_namespace\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: [\"langchain_core\", \"prompts\", \"chat\"]\n    });\n    Object.defineProperty(this, \"lc_serializable\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.defineProperty(this, \"inputVariables\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: []\n    });\n    Object.defineProperty(this, \"additionalOptions\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: {}\n    });\n    Object.defineProperty(this, \"prompt\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"messageClass\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    // ChatMessage contains role field, others don't.\n    // Because of this, we have a separate class property for ChatMessage.\n    Object.defineProperty(this, \"chatMessageClass\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    this.prompt = fields.prompt;\n    if (Array.isArray(this.prompt)) {\n      let inputVariables = [];\n      this.prompt.forEach(prompt => {\n        if (\"inputVariables\" in prompt) {\n          inputVariables = inputVariables.concat(prompt.inputVariables);\n        }\n      });\n      this.inputVariables = inputVariables;\n    } else {\n      this.inputVariables = this.prompt.inputVariables;\n    }\n    this.additionalOptions = additionalOptions !== null && additionalOptions !== void 0 ? additionalOptions : this.additionalOptions;\n  }\n  createMessage(content) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const constructor = this.constructor;\n    if (constructor._messageClass()) {\n      const MsgClass = constructor._messageClass();\n      return new MsgClass({\n        content\n      });\n    } else if (constructor.chatMessageClass) {\n      const MsgClass = constructor.chatMessageClass();\n      // Assuming ChatMessage constructor also takes a content argument\n      return new MsgClass({\n        content,\n        role: this.getRoleFromMessageClass(MsgClass.lc_name())\n      });\n    } else {\n      throw new Error(\"No message class defined\");\n    }\n  }\n  getRoleFromMessageClass(name) {\n    switch (name) {\n      case \"HumanMessage\":\n        return \"human\";\n      case \"AIMessage\":\n        return \"ai\";\n      case \"SystemMessage\":\n        return \"system\";\n      case \"ChatMessage\":\n        return \"chat\";\n      default:\n        throw new Error(\"Invalid message class name\");\n    }\n  }\n  static fromTemplate(template, additionalOptions) {\n    if (typeof template === \"string\") {\n      return new this(PromptTemplate.fromTemplate(template));\n    }\n    const prompt = [];\n    for (const item of template) {\n      if (typeof item === \"string\" || typeof item === \"object\" && \"text\" in item) {\n        let text = \"\";\n        if (typeof item === \"string\") {\n          text = item;\n        } else if (typeof item.text === \"string\") {\n          var _item$text;\n          text = (_item$text = item.text) !== null && _item$text !== void 0 ? _item$text : \"\";\n        }\n        prompt.push(PromptTemplate.fromTemplate(text));\n      } else if (typeof item === \"object\" && \"image_url\" in item) {\n        var _item$image_url;\n        let imgTemplate = (_item$image_url = item.image_url) !== null && _item$image_url !== void 0 ? _item$image_url : \"\";\n        let imgTemplateObject;\n        let inputVariables = [];\n        if (typeof imgTemplate === \"string\") {\n          const parsedTemplate = parseFString(imgTemplate);\n          const variables = parsedTemplate.flatMap(item => item.type === \"variable\" ? [item.name] : []);\n          if (variables) {\n            if (variables.length > 1) {\n              throw new Error(\"Only one format variable allowed per image template.\\nGot: \".concat(variables, \"\\nFrom: \").concat(imgTemplate));\n            }\n            inputVariables = [variables[0]];\n          } else {\n            inputVariables = [];\n          }\n          imgTemplate = {\n            url: imgTemplate\n          };\n          imgTemplateObject = new ImagePromptTemplate({\n            template: imgTemplate,\n            inputVariables\n          });\n        } else if (typeof imgTemplate === \"object\") {\n          if (\"url\" in imgTemplate) {\n            const parsedTemplate = parseFString(imgTemplate.url);\n            inputVariables = parsedTemplate.flatMap(item => item.type === \"variable\" ? [item.name] : []);\n          } else {\n            inputVariables = [];\n          }\n          imgTemplateObject = new ImagePromptTemplate({\n            template: imgTemplate,\n            inputVariables\n          });\n        } else {\n          throw new Error(\"Invalid image template\");\n        }\n        prompt.push(imgTemplateObject);\n      }\n    }\n    return new this({\n      prompt,\n      additionalOptions\n    });\n  }\n  async format(input) {\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    if (this.prompt instanceof BaseStringPromptTemplate) {\n      const text = await this.prompt.format(input);\n      return this.createMessage(text);\n    } else {\n      const content = [];\n      for (const prompt of this.prompt) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        let inputs = {};\n        if (!(\"inputVariables\" in prompt)) {\n          throw new Error(\"Prompt \".concat(prompt, \" does not have inputVariables defined.\"));\n        }\n        for (const item of prompt.inputVariables) {\n          if (!inputs) {\n            inputs = {\n              [item]: input[item]\n            };\n          }\n          inputs = {\n            ...inputs,\n            [item]: input[item]\n          };\n        }\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (prompt instanceof BaseStringPromptTemplate) {\n          const formatted = await prompt.format(inputs);\n          content.push({\n            type: \"text\",\n            text: formatted\n          });\n          /** @TODO replace this */\n          // eslint-disable-next-line no-instanceof/no-instanceof\n        } else if (prompt instanceof ImagePromptTemplate) {\n          const formatted = await prompt.format(inputs);\n          content.push({\n            type: \"image_url\",\n            image_url: formatted\n          });\n        }\n      }\n      return this.createMessage(content);\n    }\n  }\n  async formatMessages(values) {\n    return [await this.format(values)];\n  }\n}\n/**\n * Class that represents a human message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = HumanMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class HumanMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n  static _messageClass() {\n    return HumanMessage;\n  }\n  static lc_name() {\n    return \"HumanMessagePromptTemplate\";\n  }\n}\n/**\n * Class that represents an AI message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class AIMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n  static _messageClass() {\n    return AIMessage;\n  }\n  static lc_name() {\n    return \"AIMessagePromptTemplate\";\n  }\n}\n/**\n * Class that represents a system message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class SystemMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n  static _messageClass() {\n    return SystemMessage;\n  }\n  static lc_name() {\n    return \"SystemMessagePromptTemplate\";\n  }\n}\nfunction _isBaseMessagePromptTemplate(baseMessagePromptTemplateLike) {\n  return typeof baseMessagePromptTemplateLike.formatMessages === \"function\";\n}\nfunction _coerceMessagePromptTemplateLike(messagePromptTemplateLike) {\n  if (_isBaseMessagePromptTemplate(messagePromptTemplateLike) || isBaseMessage(messagePromptTemplateLike)) {\n    return messagePromptTemplateLike;\n  }\n  const message = coerceMessageLikeToMessage(messagePromptTemplateLike);\n  if (message._getType() === \"human\") {\n    return HumanMessagePromptTemplate.fromTemplate(message.content);\n  } else if (message._getType() === \"ai\") {\n    return AIMessagePromptTemplate.fromTemplate(message.content);\n  } else if (message._getType() === \"system\") {\n    return SystemMessagePromptTemplate.fromTemplate(message.content);\n  } else if (ChatMessage.isInstance(message)) {\n    return ChatMessagePromptTemplate.fromTemplate(message.content, message.role);\n  } else {\n    throw new Error(\"Could not coerce message prompt template from input. Received message type: \\\"\".concat(message._getType(), \"\\\".\"));\n  }\n}\nfunction isMessagesPlaceholder(x) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return x.constructor.lc_name() === \"MessagesPlaceholder\";\n}\n/**\n * Class that represents a chat prompt. It extends the\n * BaseChatPromptTemplate and uses an array of BaseMessagePromptTemplate\n * instances to format a series of messages for a conversation.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const chatPrompt = ChatPromptTemplate.fromMessages([\n *   [\"ai\", \"You are a helpful assistant.\"],\n *   message,\n * ]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class ChatPromptTemplate extends BaseChatPromptTemplate {\n  static lc_name() {\n    return \"ChatPromptTemplate\";\n  }\n  get lc_aliases() {\n    return {\n      promptMessages: \"messages\"\n    };\n  }\n  constructor(input) {\n    super(input);\n    Object.defineProperty(this, \"promptMessages\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: void 0\n    });\n    Object.defineProperty(this, \"validateTemplate\", {\n      enumerable: true,\n      configurable: true,\n      writable: true,\n      value: true\n    });\n    Object.assign(this, input);\n    if (this.validateTemplate) {\n      const inputVariablesMessages = new Set();\n      for (const promptMessage of this.promptMessages) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (promptMessage instanceof BaseMessage) continue;\n        for (const inputVariable of promptMessage.inputVariables) {\n          inputVariablesMessages.add(inputVariable);\n        }\n      }\n      const totalInputVariables = this.inputVariables;\n      const inputVariablesInstance = new Set(this.partialVariables ? totalInputVariables.concat(Object.keys(this.partialVariables)) : totalInputVariables);\n      const difference = new Set([...inputVariablesInstance].filter(x => !inputVariablesMessages.has(x)));\n      if (difference.size > 0) {\n        throw new Error(\"Input variables `\".concat([...difference], \"` are not used in any of the prompt messages.\"));\n      }\n      const otherDifference = new Set([...inputVariablesMessages].filter(x => !inputVariablesInstance.has(x)));\n      if (otherDifference.size > 0) {\n        throw new Error(\"Input variables `\".concat([...otherDifference], \"` are used in prompt messages but not in the prompt template.\"));\n      }\n    }\n  }\n  _getPromptType() {\n    return \"chat\";\n  }\n  async _parseImagePrompts(message, inputValues) {\n    if (typeof message.content === \"string\") {\n      return message;\n    }\n    const formattedMessageContent = await Promise.all(message.content.map(async item => {\n      if (item.type !== \"image_url\") {\n        return item;\n      }\n      let imageUrl = \"\";\n      if (typeof item.image_url === \"string\") {\n        imageUrl = item.image_url;\n      } else {\n        imageUrl = item.image_url.url;\n      }\n      const promptTemplatePlaceholder = PromptTemplate.fromTemplate(imageUrl);\n      const formattedUrl = await promptTemplatePlaceholder.format(inputValues);\n      if (typeof item.image_url !== \"string\" && \"url\" in item.image_url) {\n        // eslint-disable-next-line no-param-reassign\n        item.image_url.url = formattedUrl;\n      } else {\n        // eslint-disable-next-line no-param-reassign\n        item.image_url = formattedUrl;\n      }\n      return item;\n    }));\n    // eslint-disable-next-line no-param-reassign\n    message.content = formattedMessageContent;\n    return message;\n  }\n  async formatMessages(values) {\n    const allValues = await this.mergePartialAndUserVariables(values);\n    let resultMessages = [];\n    for (const promptMessage of this.promptMessages) {\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      if (promptMessage instanceof BaseMessage) {\n        resultMessages.push(await this._parseImagePrompts(promptMessage, allValues));\n      } else {\n        const inputValues = promptMessage.inputVariables.reduce((acc, inputVariable) => {\n          if (!(inputVariable in allValues) && !(isMessagesPlaceholder(promptMessage) && promptMessage.optional)) {\n            throw new Error(\"Missing value for input variable `\".concat(inputVariable.toString(), \"`\"));\n          }\n          acc[inputVariable] = allValues[inputVariable];\n          return acc;\n        }, {});\n        const message = await promptMessage.formatMessages(inputValues);\n        resultMessages = resultMessages.concat(message);\n      }\n    }\n    return resultMessages;\n  }\n  async partial(values) {\n    var _this$partialVariable;\n    // This is implemented in a way it doesn't require making\n    // BaseMessagePromptTemplate aware of .partial()\n    const newInputVariables = this.inputVariables.filter(iv => !(iv in values));\n    const newPartialVariables = {\n      ...((_this$partialVariable = this.partialVariables) !== null && _this$partialVariable !== void 0 ? _this$partialVariable : {}),\n      ...values\n    };\n    const promptDict = {\n      ...this,\n      inputVariables: newInputVariables,\n      partialVariables: newPartialVariables\n    };\n    return new ChatPromptTemplate(promptDict);\n  }\n  /**\n   * Load prompt template from a template f-string\n   */\n  static fromTemplate(template) {\n    const prompt = PromptTemplate.fromTemplate(template);\n    const humanTemplate = new HumanMessagePromptTemplate({\n      prompt\n    });\n    return this.fromMessages([humanTemplate]);\n  }\n  /**\n   * Create a chat model-specific prompt from individual chat messages\n   * or message-like tuples.\n   * @param promptMessages Messages to be passed to the chat model\n   * @returns A new ChatPromptTemplate\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static fromMessages(promptMessages) {\n    const flattenedMessages = promptMessages.reduce((acc, promptMessage) => acc.concat(\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    promptMessage instanceof ChatPromptTemplate ? promptMessage.promptMessages : [_coerceMessagePromptTemplateLike(promptMessage)]), []);\n    const flattenedPartialVariables = promptMessages.reduce((acc, promptMessage) =>\n    // eslint-disable-next-line no-instanceof/no-instanceof\n    promptMessage instanceof ChatPromptTemplate ? Object.assign(acc, promptMessage.partialVariables) : acc, Object.create(null));\n    const inputVariables = new Set();\n    for (const promptMessage of flattenedMessages) {\n      // eslint-disable-next-line no-instanceof/no-instanceof\n      if (promptMessage instanceof BaseMessage) continue;\n      for (const inputVariable of promptMessage.inputVariables) {\n        if (inputVariable in flattenedPartialVariables) {\n          continue;\n        }\n        inputVariables.add(inputVariable);\n      }\n    }\n    return new ChatPromptTemplate({\n      inputVariables: [...inputVariables],\n      promptMessages: flattenedMessages,\n      partialVariables: flattenedPartialVariables\n    });\n  }\n  /** @deprecated Renamed to .fromMessages */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  static fromPromptMessages(promptMessages) {\n    return this.fromMessages(promptMessages);\n  }\n}","map":{"version":3,"names":["AIMessage","HumanMessage","SystemMessage","BaseMessage","ChatMessage","coerceMessageLikeToMessage","isBaseMessage","ChatPromptValue","Runnable","BaseStringPromptTemplate","BasePromptTemplate","PromptTemplate","ImagePromptTemplate","parseFString","BaseMessagePromptTemplate","constructor","arguments","Object","defineProperty","enumerable","configurable","writable","value","invoke","input","options","_callWithConfig","formatMessages","runType","MessagesPlaceholder","lc_name","fields","_fields$optional","variableName","optional","inputVariables","validateInputOrThrow","error","Error","concat","name","isInputBaseMessage","Array","isArray","every","message","readableInput","JSON","stringify","values","_values$this$variable","BaseMessageStringPromptTemplate","prompt","format","BaseChatPromptTemplate","formatPromptValue","toString","resultMessages","ChatMessagePromptTemplate","role","fromTemplate","template","_StringImageMessagePromptTemplate","_messageClass","additionalOptions","forEach","createMessage","content","MsgClass","chatMessageClass","getRoleFromMessageClass","item","text","_item$text","push","_item$image_url","imgTemplate","image_url","imgTemplateObject","parsedTemplate","variables","flatMap","type","length","url","inputs","formatted","HumanMessagePromptTemplate","AIMessagePromptTemplate","SystemMessagePromptTemplate","_isBaseMessagePromptTemplate","baseMessagePromptTemplateLike","_coerceMessagePromptTemplateLike","messagePromptTemplateLike","_getType","isInstance","isMessagesPlaceholder","x","ChatPromptTemplate","lc_aliases","promptMessages","assign","validateTemplate","inputVariablesMessages","Set","promptMessage","inputVariable","add","totalInputVariables","inputVariablesInstance","partialVariables","keys","difference","filter","has","size","otherDifference","_getPromptType","_parseImagePrompts","inputValues","formattedMessageContent","Promise","all","map","imageUrl","promptTemplatePlaceholder","formattedUrl","allValues","mergePartialAndUserVariables","reduce","acc","partial","_this$partialVariable","newInputVariables","iv","newPartialVariables","promptDict","humanTemplate","fromMessages","flattenedMessages","flattenedPartialVariables","create","fromPromptMessages"],"sources":["/Users/mandylin/Desktop/WebCrack React/webcrack/node_modules/@langchain/core/dist/prompts/chat.js"],"sourcesContent":["// Default generic \"any\" values are for backwards compatibility.\n// Replace with \"string\" when we are comfortable with a breaking change.\nimport { AIMessage, HumanMessage, SystemMessage, BaseMessage, ChatMessage, coerceMessageLikeToMessage, isBaseMessage, } from \"../messages/index.js\";\nimport { ChatPromptValue, } from \"../prompt_values.js\";\nimport { Runnable } from \"../runnables/base.js\";\nimport { BaseStringPromptTemplate } from \"./string.js\";\nimport { BasePromptTemplate, } from \"./base.js\";\nimport { PromptTemplate } from \"./prompt.js\";\nimport { ImagePromptTemplate } from \"./image.js\";\nimport { parseFString } from \"./template.js\";\n/**\n * Abstract class that serves as a base for creating message prompt\n * templates. It defines how to format messages for different roles in a\n * conversation.\n */\nexport class BaseMessagePromptTemplate extends Runnable {\n    constructor() {\n        super(...arguments);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"prompts\", \"chat\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n    }\n    /**\n     * Calls the formatMessages method with the provided input and options.\n     * @param input Input for the formatMessages method\n     * @param options Optional BaseCallbackConfig\n     * @returns Formatted output messages\n     */\n    async invoke(input, options) {\n        return this._callWithConfig((input) => this.formatMessages(input), input, { ...options, runType: \"prompt\" });\n    }\n}\n/**\n * Class that represents a placeholder for messages in a chat prompt. It\n * extends the BaseMessagePromptTemplate.\n */\nexport class MessagesPlaceholder extends BaseMessagePromptTemplate {\n    static lc_name() {\n        return \"MessagesPlaceholder\";\n    }\n    constructor(fields) {\n        if (typeof fields === \"string\") {\n            // eslint-disable-next-line no-param-reassign\n            fields = { variableName: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"variableName\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"optional\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.variableName = fields.variableName;\n        this.optional = fields.optional ?? false;\n    }\n    get inputVariables() {\n        return [this.variableName];\n    }\n    validateInputOrThrow(input, variableName) {\n        if (this.optional && !input) {\n            return false;\n        }\n        else if (!input) {\n            const error = new Error(`Error: Field \"${variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: undefined`);\n            error.name = \"InputFormatError\";\n            throw error;\n        }\n        let isInputBaseMessage = false;\n        if (Array.isArray(input)) {\n            isInputBaseMessage = input.every((message) => isBaseMessage(message));\n        }\n        else {\n            isInputBaseMessage = isBaseMessage(input);\n        }\n        if (!isInputBaseMessage) {\n            const readableInput = typeof input === \"string\" ? input : JSON.stringify(input, null, 2);\n            const error = new Error(`Error: Field \"${variableName}\" in prompt uses a MessagesPlaceholder, which expects an array of BaseMessages as an input value. Received: ${readableInput}`);\n            error.name = \"InputFormatError\";\n            throw error;\n        }\n        return true;\n    }\n    async formatMessages(values) {\n        this.validateInputOrThrow(values[this.variableName], this.variableName);\n        return values[this.variableName] ?? [];\n    }\n}\n/**\n * Abstract class that serves as a base for creating message string prompt\n * templates. It extends the BaseMessagePromptTemplate.\n */\nexport class BaseMessageStringPromptTemplate extends BaseMessagePromptTemplate {\n    constructor(fields) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { prompt: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n    }\n    get inputVariables() {\n        return this.prompt.inputVariables;\n    }\n    async formatMessages(values) {\n        return [await this.format(values)];\n    }\n}\n/**\n * Abstract class that serves as a base for creating chat prompt\n * templates. It extends the BasePromptTemplate.\n */\nexport class BaseChatPromptTemplate extends BasePromptTemplate {\n    constructor(input) {\n        super(input);\n    }\n    async format(values) {\n        return (await this.formatPromptValue(values)).toString();\n    }\n    async formatPromptValue(values) {\n        const resultMessages = await this.formatMessages(values);\n        return new ChatPromptValue(resultMessages);\n    }\n}\n/**\n * Class that represents a chat message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class ChatMessagePromptTemplate extends BaseMessageStringPromptTemplate {\n    static lc_name() {\n        return \"ChatMessagePromptTemplate\";\n    }\n    constructor(fields, role) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign, @typescript-eslint/no-non-null-assertion\n            fields = { prompt: fields, role: role };\n        }\n        super(fields);\n        Object.defineProperty(this, \"role\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.role = fields.role;\n    }\n    async format(values) {\n        return new ChatMessage(await this.prompt.format(values), this.role);\n    }\n    static fromTemplate(template, role) {\n        return new this(PromptTemplate.fromTemplate(template), role);\n    }\n}\nclass _StringImageMessagePromptTemplate extends BaseMessagePromptTemplate {\n    static _messageClass() {\n        throw new Error(\"Can not invoke _messageClass from inside _StringImageMessagePromptTemplate\");\n    }\n    constructor(\n    /** @TODO When we come up with a better way to type prompt templates, fix this */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    fields, additionalOptions) {\n        if (!(\"prompt\" in fields)) {\n            // eslint-disable-next-line no-param-reassign\n            fields = { prompt: fields };\n        }\n        super(fields);\n        Object.defineProperty(this, \"lc_namespace\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: [\"langchain_core\", \"prompts\", \"chat\"]\n        });\n        Object.defineProperty(this, \"lc_serializable\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.defineProperty(this, \"inputVariables\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: []\n        });\n        Object.defineProperty(this, \"additionalOptions\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {}\n        });\n        Object.defineProperty(this, \"prompt\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"messageClass\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // ChatMessage contains role field, others don't.\n        // Because of this, we have a separate class property for ChatMessage.\n        Object.defineProperty(this, \"chatMessageClass\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.prompt = fields.prompt;\n        if (Array.isArray(this.prompt)) {\n            let inputVariables = [];\n            this.prompt.forEach((prompt) => {\n                if (\"inputVariables\" in prompt) {\n                    inputVariables = inputVariables.concat(prompt.inputVariables);\n                }\n            });\n            this.inputVariables = inputVariables;\n        }\n        else {\n            this.inputVariables = this.prompt.inputVariables;\n        }\n        this.additionalOptions = additionalOptions ?? this.additionalOptions;\n    }\n    createMessage(content) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const constructor = this.constructor;\n        if (constructor._messageClass()) {\n            const MsgClass = constructor._messageClass();\n            return new MsgClass({ content });\n        }\n        else if (constructor.chatMessageClass) {\n            const MsgClass = constructor.chatMessageClass();\n            // Assuming ChatMessage constructor also takes a content argument\n            return new MsgClass({\n                content,\n                role: this.getRoleFromMessageClass(MsgClass.lc_name()),\n            });\n        }\n        else {\n            throw new Error(\"No message class defined\");\n        }\n    }\n    getRoleFromMessageClass(name) {\n        switch (name) {\n            case \"HumanMessage\":\n                return \"human\";\n            case \"AIMessage\":\n                return \"ai\";\n            case \"SystemMessage\":\n                return \"system\";\n            case \"ChatMessage\":\n                return \"chat\";\n            default:\n                throw new Error(\"Invalid message class name\");\n        }\n    }\n    static fromTemplate(template, additionalOptions) {\n        if (typeof template === \"string\") {\n            return new this(PromptTemplate.fromTemplate(template));\n        }\n        const prompt = [];\n        for (const item of template) {\n            if (typeof item === \"string\" ||\n                (typeof item === \"object\" && \"text\" in item)) {\n                let text = \"\";\n                if (typeof item === \"string\") {\n                    text = item;\n                }\n                else if (typeof item.text === \"string\") {\n                    text = item.text ?? \"\";\n                }\n                prompt.push(PromptTemplate.fromTemplate(text));\n            }\n            else if (typeof item === \"object\" && \"image_url\" in item) {\n                let imgTemplate = item.image_url ?? \"\";\n                let imgTemplateObject;\n                let inputVariables = [];\n                if (typeof imgTemplate === \"string\") {\n                    const parsedTemplate = parseFString(imgTemplate);\n                    const variables = parsedTemplate.flatMap((item) => item.type === \"variable\" ? [item.name] : []);\n                    if (variables) {\n                        if (variables.length > 1) {\n                            throw new Error(`Only one format variable allowed per image template.\\nGot: ${variables}\\nFrom: ${imgTemplate}`);\n                        }\n                        inputVariables = [variables[0]];\n                    }\n                    else {\n                        inputVariables = [];\n                    }\n                    imgTemplate = { url: imgTemplate };\n                    imgTemplateObject = new ImagePromptTemplate({\n                        template: imgTemplate,\n                        inputVariables,\n                    });\n                }\n                else if (typeof imgTemplate === \"object\") {\n                    if (\"url\" in imgTemplate) {\n                        const parsedTemplate = parseFString(imgTemplate.url);\n                        inputVariables = parsedTemplate.flatMap((item) => item.type === \"variable\" ? [item.name] : []);\n                    }\n                    else {\n                        inputVariables = [];\n                    }\n                    imgTemplateObject = new ImagePromptTemplate({\n                        template: imgTemplate,\n                        inputVariables,\n                    });\n                }\n                else {\n                    throw new Error(\"Invalid image template\");\n                }\n                prompt.push(imgTemplateObject);\n            }\n        }\n        return new this({ prompt, additionalOptions });\n    }\n    async format(input) {\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        if (this.prompt instanceof BaseStringPromptTemplate) {\n            const text = await this.prompt.format(input);\n            return this.createMessage(text);\n        }\n        else {\n            const content = [];\n            for (const prompt of this.prompt) {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                let inputs = {};\n                if (!(\"inputVariables\" in prompt)) {\n                    throw new Error(`Prompt ${prompt} does not have inputVariables defined.`);\n                }\n                for (const item of prompt.inputVariables) {\n                    if (!inputs) {\n                        inputs = { [item]: input[item] };\n                    }\n                    inputs = { ...inputs, [item]: input[item] };\n                }\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (prompt instanceof BaseStringPromptTemplate) {\n                    const formatted = await prompt.format(inputs);\n                    content.push({ type: \"text\", text: formatted });\n                    /** @TODO replace this */\n                    // eslint-disable-next-line no-instanceof/no-instanceof\n                }\n                else if (prompt instanceof ImagePromptTemplate) {\n                    const formatted = await prompt.format(inputs);\n                    content.push({ type: \"image_url\", image_url: formatted });\n                }\n            }\n            return this.createMessage(content);\n        }\n    }\n    async formatMessages(values) {\n        return [await this.format(values)];\n    }\n}\n/**\n * Class that represents a human message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = HumanMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class HumanMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n    static _messageClass() {\n        return HumanMessage;\n    }\n    static lc_name() {\n        return \"HumanMessagePromptTemplate\";\n    }\n}\n/**\n * Class that represents an AI message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n */\nexport class AIMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n    static _messageClass() {\n        return AIMessage;\n    }\n    static lc_name() {\n        return \"AIMessagePromptTemplate\";\n    }\n}\n/**\n * Class that represents a system message prompt template. It extends the\n * BaseMessageStringPromptTemplate.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const formatted = await message.format({ text: \"Hello world!\" });\n *\n * const chatPrompt = ChatPromptTemplate.fromMessages([message]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class SystemMessagePromptTemplate extends _StringImageMessagePromptTemplate {\n    static _messageClass() {\n        return SystemMessage;\n    }\n    static lc_name() {\n        return \"SystemMessagePromptTemplate\";\n    }\n}\nfunction _isBaseMessagePromptTemplate(baseMessagePromptTemplateLike) {\n    return (typeof baseMessagePromptTemplateLike\n        .formatMessages === \"function\");\n}\nfunction _coerceMessagePromptTemplateLike(messagePromptTemplateLike) {\n    if (_isBaseMessagePromptTemplate(messagePromptTemplateLike) ||\n        isBaseMessage(messagePromptTemplateLike)) {\n        return messagePromptTemplateLike;\n    }\n    const message = coerceMessageLikeToMessage(messagePromptTemplateLike);\n    if (message._getType() === \"human\") {\n        return HumanMessagePromptTemplate.fromTemplate(message.content);\n    }\n    else if (message._getType() === \"ai\") {\n        return AIMessagePromptTemplate.fromTemplate(message.content);\n    }\n    else if (message._getType() === \"system\") {\n        return SystemMessagePromptTemplate.fromTemplate(message.content);\n    }\n    else if (ChatMessage.isInstance(message)) {\n        return ChatMessagePromptTemplate.fromTemplate(message.content, message.role);\n    }\n    else {\n        throw new Error(`Could not coerce message prompt template from input. Received message type: \"${message._getType()}\".`);\n    }\n}\nfunction isMessagesPlaceholder(x) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return x.constructor.lc_name() === \"MessagesPlaceholder\";\n}\n/**\n * Class that represents a chat prompt. It extends the\n * BaseChatPromptTemplate and uses an array of BaseMessagePromptTemplate\n * instances to format a series of messages for a conversation.\n * @example\n * ```typescript\n * const message = SystemMessagePromptTemplate.fromTemplate(\"{text}\");\n * const chatPrompt = ChatPromptTemplate.fromMessages([\n *   [\"ai\", \"You are a helpful assistant.\"],\n *   message,\n * ]);\n * const formattedChatPrompt = await chatPrompt.invoke({\n *   text: \"Hello world!\",\n * });\n * ```\n */\nexport class ChatPromptTemplate extends BaseChatPromptTemplate {\n    static lc_name() {\n        return \"ChatPromptTemplate\";\n    }\n    get lc_aliases() {\n        return {\n            promptMessages: \"messages\",\n        };\n    }\n    constructor(input) {\n        super(input);\n        Object.defineProperty(this, \"promptMessages\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"validateTemplate\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: true\n        });\n        Object.assign(this, input);\n        if (this.validateTemplate) {\n            const inputVariablesMessages = new Set();\n            for (const promptMessage of this.promptMessages) {\n                // eslint-disable-next-line no-instanceof/no-instanceof\n                if (promptMessage instanceof BaseMessage)\n                    continue;\n                for (const inputVariable of promptMessage.inputVariables) {\n                    inputVariablesMessages.add(inputVariable);\n                }\n            }\n            const totalInputVariables = this.inputVariables;\n            const inputVariablesInstance = new Set(this.partialVariables\n                ? totalInputVariables.concat(Object.keys(this.partialVariables))\n                : totalInputVariables);\n            const difference = new Set([...inputVariablesInstance].filter((x) => !inputVariablesMessages.has(x)));\n            if (difference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...difference,\n                ]}\\` are not used in any of the prompt messages.`);\n            }\n            const otherDifference = new Set([...inputVariablesMessages].filter((x) => !inputVariablesInstance.has(x)));\n            if (otherDifference.size > 0) {\n                throw new Error(`Input variables \\`${[\n                    ...otherDifference,\n                ]}\\` are used in prompt messages but not in the prompt template.`);\n            }\n        }\n    }\n    _getPromptType() {\n        return \"chat\";\n    }\n    async _parseImagePrompts(message, inputValues) {\n        if (typeof message.content === \"string\") {\n            return message;\n        }\n        const formattedMessageContent = await Promise.all(message.content.map(async (item) => {\n            if (item.type !== \"image_url\") {\n                return item;\n            }\n            let imageUrl = \"\";\n            if (typeof item.image_url === \"string\") {\n                imageUrl = item.image_url;\n            }\n            else {\n                imageUrl = item.image_url.url;\n            }\n            const promptTemplatePlaceholder = PromptTemplate.fromTemplate(imageUrl);\n            const formattedUrl = await promptTemplatePlaceholder.format(inputValues);\n            if (typeof item.image_url !== \"string\" && \"url\" in item.image_url) {\n                // eslint-disable-next-line no-param-reassign\n                item.image_url.url = formattedUrl;\n            }\n            else {\n                // eslint-disable-next-line no-param-reassign\n                item.image_url = formattedUrl;\n            }\n            return item;\n        }));\n        // eslint-disable-next-line no-param-reassign\n        message.content = formattedMessageContent;\n        return message;\n    }\n    async formatMessages(values) {\n        const allValues = await this.mergePartialAndUserVariables(values);\n        let resultMessages = [];\n        for (const promptMessage of this.promptMessages) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (promptMessage instanceof BaseMessage) {\n                resultMessages.push(await this._parseImagePrompts(promptMessage, allValues));\n            }\n            else {\n                const inputValues = promptMessage.inputVariables.reduce((acc, inputVariable) => {\n                    if (!(inputVariable in allValues) &&\n                        !(isMessagesPlaceholder(promptMessage) && promptMessage.optional)) {\n                        throw new Error(`Missing value for input variable \\`${inputVariable.toString()}\\``);\n                    }\n                    acc[inputVariable] = allValues[inputVariable];\n                    return acc;\n                }, {});\n                const message = await promptMessage.formatMessages(inputValues);\n                resultMessages = resultMessages.concat(message);\n            }\n        }\n        return resultMessages;\n    }\n    async partial(values) {\n        // This is implemented in a way it doesn't require making\n        // BaseMessagePromptTemplate aware of .partial()\n        const newInputVariables = this.inputVariables.filter((iv) => !(iv in values));\n        const newPartialVariables = {\n            ...(this.partialVariables ?? {}),\n            ...values,\n        };\n        const promptDict = {\n            ...this,\n            inputVariables: newInputVariables,\n            partialVariables: newPartialVariables,\n        };\n        return new ChatPromptTemplate(promptDict);\n    }\n    /**\n     * Load prompt template from a template f-string\n     */\n    static fromTemplate(template) {\n        const prompt = PromptTemplate.fromTemplate(template);\n        const humanTemplate = new HumanMessagePromptTemplate({ prompt });\n        return this.fromMessages([humanTemplate]);\n    }\n    /**\n     * Create a chat model-specific prompt from individual chat messages\n     * or message-like tuples.\n     * @param promptMessages Messages to be passed to the chat model\n     * @returns A new ChatPromptTemplate\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromMessages(promptMessages) {\n        const flattenedMessages = promptMessages.reduce((acc, promptMessage) => acc.concat(\n        // eslint-disable-next-line no-instanceof/no-instanceof\n        promptMessage instanceof ChatPromptTemplate\n            ? promptMessage.promptMessages\n            : [_coerceMessagePromptTemplateLike(promptMessage)]), []);\n        const flattenedPartialVariables = promptMessages.reduce((acc, promptMessage) => \n        // eslint-disable-next-line no-instanceof/no-instanceof\n        promptMessage instanceof ChatPromptTemplate\n            ? Object.assign(acc, promptMessage.partialVariables)\n            : acc, Object.create(null));\n        const inputVariables = new Set();\n        for (const promptMessage of flattenedMessages) {\n            // eslint-disable-next-line no-instanceof/no-instanceof\n            if (promptMessage instanceof BaseMessage)\n                continue;\n            for (const inputVariable of promptMessage.inputVariables) {\n                if (inputVariable in flattenedPartialVariables) {\n                    continue;\n                }\n                inputVariables.add(inputVariable);\n            }\n        }\n        return new ChatPromptTemplate({\n            inputVariables: [...inputVariables],\n            promptMessages: flattenedMessages,\n            partialVariables: flattenedPartialVariables,\n        });\n    }\n    /** @deprecated Renamed to .fromMessages */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    static fromPromptMessages(promptMessages) {\n        return this.fromMessages(promptMessages);\n    }\n}\n"],"mappings":"AAAA;AACA;AACA,SAASA,SAAS,EAAEC,YAAY,EAAEC,aAAa,EAAEC,WAAW,EAAEC,WAAW,EAAEC,0BAA0B,EAAEC,aAAa,QAAS,sBAAsB;AACnJ,SAASC,eAAe,QAAS,qBAAqB;AACtD,SAASC,QAAQ,QAAQ,sBAAsB;AAC/C,SAASC,wBAAwB,QAAQ,aAAa;AACtD,SAASC,kBAAkB,QAAS,WAAW;AAC/C,SAASC,cAAc,QAAQ,aAAa;AAC5C,SAASC,mBAAmB,QAAQ,YAAY;AAChD,SAASC,YAAY,QAAQ,eAAe;AAC5C;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,yBAAyB,SAASN,QAAQ,CAAC;EACpDO,WAAWA,CAAA,EAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnBC,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,MAAM;IAC/C,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,iBAAiB,EAAE;MAC3CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMC,MAAMA,CAACC,KAAK,EAAEC,OAAO,EAAE;IACzB,OAAO,IAAI,CAACC,eAAe,CAAEF,KAAK,IAAK,IAAI,CAACG,cAAc,CAACH,KAAK,CAAC,EAAEA,KAAK,EAAE;MAAE,GAAGC,OAAO;MAAEG,OAAO,EAAE;IAAS,CAAC,CAAC;EAChH;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,mBAAmB,SAASf,yBAAyB,CAAC;EAC/D,OAAOgB,OAAOA,CAAA,EAAG;IACb,OAAO,qBAAqB;EAChC;EACAf,WAAWA,CAACgB,MAAM,EAAE;IAAA,IAAAC,gBAAA;IAChB,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;MAC5B;MACAA,MAAM,GAAG;QAAEE,YAAY,EAAEF;MAAO,CAAC;IACrC;IACA,KAAK,CAACA,MAAM,CAAC;IACbd,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,UAAU,EAAE;MACpCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACW,YAAY,GAAGF,MAAM,CAACE,YAAY;IACvC,IAAI,CAACC,QAAQ,IAAAF,gBAAA,GAAGD,MAAM,CAACG,QAAQ,cAAAF,gBAAA,cAAAA,gBAAA,GAAI,KAAK;EAC5C;EACA,IAAIG,cAAcA,CAAA,EAAG;IACjB,OAAO,CAAC,IAAI,CAACF,YAAY,CAAC;EAC9B;EACAG,oBAAoBA,CAACZ,KAAK,EAAES,YAAY,EAAE;IACtC,IAAI,IAAI,CAACC,QAAQ,IAAI,CAACV,KAAK,EAAE;MACzB,OAAO,KAAK;IAChB,CAAC,MACI,IAAI,CAACA,KAAK,EAAE;MACb,MAAMa,KAAK,GAAG,IAAIC,KAAK,mBAAAC,MAAA,CAAkBN,YAAY,2HAAuH,CAAC;MAC7KI,KAAK,CAACG,IAAI,GAAG,kBAAkB;MAC/B,MAAMH,KAAK;IACf;IACA,IAAII,kBAAkB,GAAG,KAAK;IAC9B,IAAIC,KAAK,CAACC,OAAO,CAACnB,KAAK,CAAC,EAAE;MACtBiB,kBAAkB,GAAGjB,KAAK,CAACoB,KAAK,CAAEC,OAAO,IAAKvC,aAAa,CAACuC,OAAO,CAAC,CAAC;IACzE,CAAC,MACI;MACDJ,kBAAkB,GAAGnC,aAAa,CAACkB,KAAK,CAAC;IAC7C;IACA,IAAI,CAACiB,kBAAkB,EAAE;MACrB,MAAMK,aAAa,GAAG,OAAOtB,KAAK,KAAK,QAAQ,GAAGA,KAAK,GAAGuB,IAAI,CAACC,SAAS,CAACxB,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;MACxF,MAAMa,KAAK,GAAG,IAAIC,KAAK,mBAAAC,MAAA,CAAkBN,YAAY,mHAAAM,MAAA,CAA+GO,aAAa,CAAE,CAAC;MACpLT,KAAK,CAACG,IAAI,GAAG,kBAAkB;MAC/B,MAAMH,KAAK;IACf;IACA,OAAO,IAAI;EACf;EACA,MAAMV,cAAcA,CAACsB,MAAM,EAAE;IAAA,IAAAC,qBAAA;IACzB,IAAI,CAACd,oBAAoB,CAACa,MAAM,CAAC,IAAI,CAAChB,YAAY,CAAC,EAAE,IAAI,CAACA,YAAY,CAAC;IACvE,QAAAiB,qBAAA,GAAOD,MAAM,CAAC,IAAI,CAAChB,YAAY,CAAC,cAAAiB,qBAAA,cAAAA,qBAAA,GAAI,EAAE;EAC1C;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,+BAA+B,SAASrC,yBAAyB,CAAC;EAC3EC,WAAWA,CAACgB,MAAM,EAAE;IAChB,IAAI,EAAE,QAAQ,IAAIA,MAAM,CAAC,EAAE;MACvB;MACAA,MAAM,GAAG;QAAEqB,MAAM,EAAErB;MAAO,CAAC;IAC/B;IACA,KAAK,CAACA,MAAM,CAAC;IACbd,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;MAClCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAAC8B,MAAM,GAAGrB,MAAM,CAACqB,MAAM;EAC/B;EACA,IAAIjB,cAAcA,CAAA,EAAG;IACjB,OAAO,IAAI,CAACiB,MAAM,CAACjB,cAAc;EACrC;EACA,MAAMR,cAAcA,CAACsB,MAAM,EAAE;IACzB,OAAO,CAAC,MAAM,IAAI,CAACI,MAAM,CAACJ,MAAM,CAAC,CAAC;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMK,sBAAsB,SAAS5C,kBAAkB,CAAC;EAC3DK,WAAWA,CAACS,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;EAChB;EACA,MAAM6B,MAAMA,CAACJ,MAAM,EAAE;IACjB,OAAO,CAAC,MAAM,IAAI,CAACM,iBAAiB,CAACN,MAAM,CAAC,EAAEO,QAAQ,CAAC,CAAC;EAC5D;EACA,MAAMD,iBAAiBA,CAACN,MAAM,EAAE;IAC5B,MAAMQ,cAAc,GAAG,MAAM,IAAI,CAAC9B,cAAc,CAACsB,MAAM,CAAC;IACxD,OAAO,IAAI1C,eAAe,CAACkD,cAAc,CAAC;EAC9C;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,yBAAyB,SAASP,+BAA+B,CAAC;EAC3E,OAAOrB,OAAOA,CAAA,EAAG;IACb,OAAO,2BAA2B;EACtC;EACAf,WAAWA,CAACgB,MAAM,EAAE4B,IAAI,EAAE;IACtB,IAAI,EAAE,QAAQ,IAAI5B,MAAM,CAAC,EAAE;MACvB;MACAA,MAAM,GAAG;QAAEqB,MAAM,EAAErB,MAAM;QAAE4B,IAAI,EAAEA;MAAK,CAAC;IAC3C;IACA,KAAK,CAAC5B,MAAM,CAAC;IACbd,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE;MAChCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAACqC,IAAI,GAAG5B,MAAM,CAAC4B,IAAI;EAC3B;EACA,MAAMN,MAAMA,CAACJ,MAAM,EAAE;IACjB,OAAO,IAAI7C,WAAW,CAAC,MAAM,IAAI,CAACgD,MAAM,CAACC,MAAM,CAACJ,MAAM,CAAC,EAAE,IAAI,CAACU,IAAI,CAAC;EACvE;EACA,OAAOC,YAAYA,CAACC,QAAQ,EAAEF,IAAI,EAAE;IAChC,OAAO,IAAI,IAAI,CAAChD,cAAc,CAACiD,YAAY,CAACC,QAAQ,CAAC,EAAEF,IAAI,CAAC;EAChE;AACJ;AACA,MAAMG,iCAAiC,SAAShD,yBAAyB,CAAC;EACtE,OAAOiD,aAAaA,CAAA,EAAG;IACnB,MAAM,IAAIzB,KAAK,CAAC,4EAA4E,CAAC;EACjG;EACAvB,WAAWA,CAAA,CACX;EACA;EACAgB,MAAM,EAAEiC,iBAAiB,EAAE;IACvB,IAAI,EAAE,QAAQ,IAAIjC,MAAM,CAAC,EAAE;MACvB;MACAA,MAAM,GAAG;QAAEqB,MAAM,EAAErB;MAAO,CAAC;IAC/B;IACA,KAAK,CAACA,MAAM,CAAC;IACbd,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,CAAC,gBAAgB,EAAE,SAAS,EAAE,MAAM;IAC/C,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,iBAAiB,EAAE;MAC3CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,gBAAgB,EAAE;MAC1CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,mBAAmB,EAAE;MAC7CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,CAAC;IACZ,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;MAClCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,cAAc,EAAE;MACxCC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF;IACA;IACAL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,kBAAkB,EAAE;MAC5CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACF,IAAI,CAAC8B,MAAM,GAAGrB,MAAM,CAACqB,MAAM;IAC3B,IAAIV,KAAK,CAACC,OAAO,CAAC,IAAI,CAACS,MAAM,CAAC,EAAE;MAC5B,IAAIjB,cAAc,GAAG,EAAE;MACvB,IAAI,CAACiB,MAAM,CAACa,OAAO,CAAEb,MAAM,IAAK;QAC5B,IAAI,gBAAgB,IAAIA,MAAM,EAAE;UAC5BjB,cAAc,GAAGA,cAAc,CAACI,MAAM,CAACa,MAAM,CAACjB,cAAc,CAAC;QACjE;MACJ,CAAC,CAAC;MACF,IAAI,CAACA,cAAc,GAAGA,cAAc;IACxC,CAAC,MACI;MACD,IAAI,CAACA,cAAc,GAAG,IAAI,CAACiB,MAAM,CAACjB,cAAc;IACpD;IACA,IAAI,CAAC6B,iBAAiB,GAAGA,iBAAiB,aAAjBA,iBAAiB,cAAjBA,iBAAiB,GAAI,IAAI,CAACA,iBAAiB;EACxE;EACAE,aAAaA,CAACC,OAAO,EAAE;IACnB;IACA,MAAMpD,WAAW,GAAG,IAAI,CAACA,WAAW;IACpC,IAAIA,WAAW,CAACgD,aAAa,CAAC,CAAC,EAAE;MAC7B,MAAMK,QAAQ,GAAGrD,WAAW,CAACgD,aAAa,CAAC,CAAC;MAC5C,OAAO,IAAIK,QAAQ,CAAC;QAAED;MAAQ,CAAC,CAAC;IACpC,CAAC,MACI,IAAIpD,WAAW,CAACsD,gBAAgB,EAAE;MACnC,MAAMD,QAAQ,GAAGrD,WAAW,CAACsD,gBAAgB,CAAC,CAAC;MAC/C;MACA,OAAO,IAAID,QAAQ,CAAC;QAChBD,OAAO;QACPR,IAAI,EAAE,IAAI,CAACW,uBAAuB,CAACF,QAAQ,CAACtC,OAAO,CAAC,CAAC;MACzD,CAAC,CAAC;IACN,CAAC,MACI;MACD,MAAM,IAAIQ,KAAK,CAAC,0BAA0B,CAAC;IAC/C;EACJ;EACAgC,uBAAuBA,CAAC9B,IAAI,EAAE;IAC1B,QAAQA,IAAI;MACR,KAAK,cAAc;QACf,OAAO,OAAO;MAClB,KAAK,WAAW;QACZ,OAAO,IAAI;MACf,KAAK,eAAe;QAChB,OAAO,QAAQ;MACnB,KAAK,aAAa;QACd,OAAO,MAAM;MACjB;QACI,MAAM,IAAIF,KAAK,CAAC,4BAA4B,CAAC;IACrD;EACJ;EACA,OAAOsB,YAAYA,CAACC,QAAQ,EAAEG,iBAAiB,EAAE;IAC7C,IAAI,OAAOH,QAAQ,KAAK,QAAQ,EAAE;MAC9B,OAAO,IAAI,IAAI,CAAClD,cAAc,CAACiD,YAAY,CAACC,QAAQ,CAAC,CAAC;IAC1D;IACA,MAAMT,MAAM,GAAG,EAAE;IACjB,KAAK,MAAMmB,IAAI,IAAIV,QAAQ,EAAE;MACzB,IAAI,OAAOU,IAAI,KAAK,QAAQ,IACvB,OAAOA,IAAI,KAAK,QAAQ,IAAI,MAAM,IAAIA,IAAK,EAAE;QAC9C,IAAIC,IAAI,GAAG,EAAE;QACb,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;UAC1BC,IAAI,GAAGD,IAAI;QACf,CAAC,MACI,IAAI,OAAOA,IAAI,CAACC,IAAI,KAAK,QAAQ,EAAE;UAAA,IAAAC,UAAA;UACpCD,IAAI,IAAAC,UAAA,GAAGF,IAAI,CAACC,IAAI,cAAAC,UAAA,cAAAA,UAAA,GAAI,EAAE;QAC1B;QACArB,MAAM,CAACsB,IAAI,CAAC/D,cAAc,CAACiD,YAAY,CAACY,IAAI,CAAC,CAAC;MAClD,CAAC,MACI,IAAI,OAAOD,IAAI,KAAK,QAAQ,IAAI,WAAW,IAAIA,IAAI,EAAE;QAAA,IAAAI,eAAA;QACtD,IAAIC,WAAW,IAAAD,eAAA,GAAGJ,IAAI,CAACM,SAAS,cAAAF,eAAA,cAAAA,eAAA,GAAI,EAAE;QACtC,IAAIG,iBAAiB;QACrB,IAAI3C,cAAc,GAAG,EAAE;QACvB,IAAI,OAAOyC,WAAW,KAAK,QAAQ,EAAE;UACjC,MAAMG,cAAc,GAAGlE,YAAY,CAAC+D,WAAW,CAAC;UAChD,MAAMI,SAAS,GAAGD,cAAc,CAACE,OAAO,CAAEV,IAAI,IAAKA,IAAI,CAACW,IAAI,KAAK,UAAU,GAAG,CAACX,IAAI,CAAC/B,IAAI,CAAC,GAAG,EAAE,CAAC;UAC/F,IAAIwC,SAAS,EAAE;YACX,IAAIA,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;cACtB,MAAM,IAAI7C,KAAK,+DAAAC,MAAA,CAA+DyC,SAAS,cAAAzC,MAAA,CAAWqC,WAAW,CAAE,CAAC;YACpH;YACAzC,cAAc,GAAG,CAAC6C,SAAS,CAAC,CAAC,CAAC,CAAC;UACnC,CAAC,MACI;YACD7C,cAAc,GAAG,EAAE;UACvB;UACAyC,WAAW,GAAG;YAAEQ,GAAG,EAAER;UAAY,CAAC;UAClCE,iBAAiB,GAAG,IAAIlE,mBAAmB,CAAC;YACxCiD,QAAQ,EAAEe,WAAW;YACrBzC;UACJ,CAAC,CAAC;QACN,CAAC,MACI,IAAI,OAAOyC,WAAW,KAAK,QAAQ,EAAE;UACtC,IAAI,KAAK,IAAIA,WAAW,EAAE;YACtB,MAAMG,cAAc,GAAGlE,YAAY,CAAC+D,WAAW,CAACQ,GAAG,CAAC;YACpDjD,cAAc,GAAG4C,cAAc,CAACE,OAAO,CAAEV,IAAI,IAAKA,IAAI,CAACW,IAAI,KAAK,UAAU,GAAG,CAACX,IAAI,CAAC/B,IAAI,CAAC,GAAG,EAAE,CAAC;UAClG,CAAC,MACI;YACDL,cAAc,GAAG,EAAE;UACvB;UACA2C,iBAAiB,GAAG,IAAIlE,mBAAmB,CAAC;YACxCiD,QAAQ,EAAEe,WAAW;YACrBzC;UACJ,CAAC,CAAC;QACN,CAAC,MACI;UACD,MAAM,IAAIG,KAAK,CAAC,wBAAwB,CAAC;QAC7C;QACAc,MAAM,CAACsB,IAAI,CAACI,iBAAiB,CAAC;MAClC;IACJ;IACA,OAAO,IAAI,IAAI,CAAC;MAAE1B,MAAM;MAAEY;IAAkB,CAAC,CAAC;EAClD;EACA,MAAMX,MAAMA,CAAC7B,KAAK,EAAE;IAChB;IACA,IAAI,IAAI,CAAC4B,MAAM,YAAY3C,wBAAwB,EAAE;MACjD,MAAM+D,IAAI,GAAG,MAAM,IAAI,CAACpB,MAAM,CAACC,MAAM,CAAC7B,KAAK,CAAC;MAC5C,OAAO,IAAI,CAAC0C,aAAa,CAACM,IAAI,CAAC;IACnC,CAAC,MACI;MACD,MAAML,OAAO,GAAG,EAAE;MAClB,KAAK,MAAMf,MAAM,IAAI,IAAI,CAACA,MAAM,EAAE;QAC9B;QACA,IAAIiC,MAAM,GAAG,CAAC,CAAC;QACf,IAAI,EAAE,gBAAgB,IAAIjC,MAAM,CAAC,EAAE;UAC/B,MAAM,IAAId,KAAK,WAAAC,MAAA,CAAWa,MAAM,2CAAwC,CAAC;QAC7E;QACA,KAAK,MAAMmB,IAAI,IAAInB,MAAM,CAACjB,cAAc,EAAE;UACtC,IAAI,CAACkD,MAAM,EAAE;YACTA,MAAM,GAAG;cAAE,CAACd,IAAI,GAAG/C,KAAK,CAAC+C,IAAI;YAAE,CAAC;UACpC;UACAc,MAAM,GAAG;YAAE,GAAGA,MAAM;YAAE,CAACd,IAAI,GAAG/C,KAAK,CAAC+C,IAAI;UAAE,CAAC;QAC/C;QACA;QACA,IAAInB,MAAM,YAAY3C,wBAAwB,EAAE;UAC5C,MAAM6E,SAAS,GAAG,MAAMlC,MAAM,CAACC,MAAM,CAACgC,MAAM,CAAC;UAC7ClB,OAAO,CAACO,IAAI,CAAC;YAAEQ,IAAI,EAAE,MAAM;YAAEV,IAAI,EAAEc;UAAU,CAAC,CAAC;UAC/C;UACA;QACJ,CAAC,MACI,IAAIlC,MAAM,YAAYxC,mBAAmB,EAAE;UAC5C,MAAM0E,SAAS,GAAG,MAAMlC,MAAM,CAACC,MAAM,CAACgC,MAAM,CAAC;UAC7ClB,OAAO,CAACO,IAAI,CAAC;YAAEQ,IAAI,EAAE,WAAW;YAAEL,SAAS,EAAES;UAAU,CAAC,CAAC;QAC7D;MACJ;MACA,OAAO,IAAI,CAACpB,aAAa,CAACC,OAAO,CAAC;IACtC;EACJ;EACA,MAAMxC,cAAcA,CAACsB,MAAM,EAAE;IACzB,OAAO,CAAC,MAAM,IAAI,CAACI,MAAM,CAACJ,MAAM,CAAC,CAAC;EACtC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMsC,0BAA0B,SAASzB,iCAAiC,CAAC;EAC9E,OAAOC,aAAaA,CAAA,EAAG;IACnB,OAAO9D,YAAY;EACvB;EACA,OAAO6B,OAAOA,CAAA,EAAG;IACb,OAAO,4BAA4B;EACvC;AACJ;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM0D,uBAAuB,SAAS1B,iCAAiC,CAAC;EAC3E,OAAOC,aAAaA,CAAA,EAAG;IACnB,OAAO/D,SAAS;EACpB;EACA,OAAO8B,OAAOA,CAAA,EAAG;IACb,OAAO,yBAAyB;EACpC;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAM2D,2BAA2B,SAAS3B,iCAAiC,CAAC;EAC/E,OAAOC,aAAaA,CAAA,EAAG;IACnB,OAAO7D,aAAa;EACxB;EACA,OAAO4B,OAAOA,CAAA,EAAG;IACb,OAAO,6BAA6B;EACxC;AACJ;AACA,SAAS4D,4BAA4BA,CAACC,6BAA6B,EAAE;EACjE,OAAQ,OAAOA,6BAA6B,CACvChE,cAAc,KAAK,UAAU;AACtC;AACA,SAASiE,gCAAgCA,CAACC,yBAAyB,EAAE;EACjE,IAAIH,4BAA4B,CAACG,yBAAyB,CAAC,IACvDvF,aAAa,CAACuF,yBAAyB,CAAC,EAAE;IAC1C,OAAOA,yBAAyB;EACpC;EACA,MAAMhD,OAAO,GAAGxC,0BAA0B,CAACwF,yBAAyB,CAAC;EACrE,IAAIhD,OAAO,CAACiD,QAAQ,CAAC,CAAC,KAAK,OAAO,EAAE;IAChC,OAAOP,0BAA0B,CAAC3B,YAAY,CAACf,OAAO,CAACsB,OAAO,CAAC;EACnE,CAAC,MACI,IAAItB,OAAO,CAACiD,QAAQ,CAAC,CAAC,KAAK,IAAI,EAAE;IAClC,OAAON,uBAAuB,CAAC5B,YAAY,CAACf,OAAO,CAACsB,OAAO,CAAC;EAChE,CAAC,MACI,IAAItB,OAAO,CAACiD,QAAQ,CAAC,CAAC,KAAK,QAAQ,EAAE;IACtC,OAAOL,2BAA2B,CAAC7B,YAAY,CAACf,OAAO,CAACsB,OAAO,CAAC;EACpE,CAAC,MACI,IAAI/D,WAAW,CAAC2F,UAAU,CAAClD,OAAO,CAAC,EAAE;IACtC,OAAOa,yBAAyB,CAACE,YAAY,CAACf,OAAO,CAACsB,OAAO,EAAEtB,OAAO,CAACc,IAAI,CAAC;EAChF,CAAC,MACI;IACD,MAAM,IAAIrB,KAAK,kFAAAC,MAAA,CAAiFM,OAAO,CAACiD,QAAQ,CAAC,CAAC,QAAI,CAAC;EAC3H;AACJ;AACA,SAASE,qBAAqBA,CAACC,CAAC,EAAE;EAC9B;EACA,OAAOA,CAAC,CAAClF,WAAW,CAACe,OAAO,CAAC,CAAC,KAAK,qBAAqB;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMoE,kBAAkB,SAAS5C,sBAAsB,CAAC;EAC3D,OAAOxB,OAAOA,CAAA,EAAG;IACb,OAAO,oBAAoB;EAC/B;EACA,IAAIqE,UAAUA,CAAA,EAAG;IACb,OAAO;MACHC,cAAc,EAAE;IACpB,CAAC;EACL;EACArF,WAAWA,CAACS,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;IACZP,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,gBAAgB,EAAE;MAC1CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE,KAAK;IAChB,CAAC,CAAC;IACFL,MAAM,CAACC,cAAc,CAAC,IAAI,EAAE,kBAAkB,EAAE;MAC5CC,UAAU,EAAE,IAAI;MAChBC,YAAY,EAAE,IAAI;MAClBC,QAAQ,EAAE,IAAI;MACdC,KAAK,EAAE;IACX,CAAC,CAAC;IACFL,MAAM,CAACoF,MAAM,CAAC,IAAI,EAAE7E,KAAK,CAAC;IAC1B,IAAI,IAAI,CAAC8E,gBAAgB,EAAE;MACvB,MAAMC,sBAAsB,GAAG,IAAIC,GAAG,CAAC,CAAC;MACxC,KAAK,MAAMC,aAAa,IAAI,IAAI,CAACL,cAAc,EAAE;QAC7C;QACA,IAAIK,aAAa,YAAYtG,WAAW,EACpC;QACJ,KAAK,MAAMuG,aAAa,IAAID,aAAa,CAACtE,cAAc,EAAE;UACtDoE,sBAAsB,CAACI,GAAG,CAACD,aAAa,CAAC;QAC7C;MACJ;MACA,MAAME,mBAAmB,GAAG,IAAI,CAACzE,cAAc;MAC/C,MAAM0E,sBAAsB,GAAG,IAAIL,GAAG,CAAC,IAAI,CAACM,gBAAgB,GACtDF,mBAAmB,CAACrE,MAAM,CAACtB,MAAM,CAAC8F,IAAI,CAAC,IAAI,CAACD,gBAAgB,CAAC,CAAC,GAC9DF,mBAAmB,CAAC;MAC1B,MAAMI,UAAU,GAAG,IAAIR,GAAG,CAAC,CAAC,GAAGK,sBAAsB,CAAC,CAACI,MAAM,CAAEhB,CAAC,IAAK,CAACM,sBAAsB,CAACW,GAAG,CAACjB,CAAC,CAAC,CAAC,CAAC;MACrG,IAAIe,UAAU,CAACG,IAAI,GAAG,CAAC,EAAE;QACrB,MAAM,IAAI7E,KAAK,qBAAAC,MAAA,CAAsB,CACjC,GAAGyE,UAAU,CAChB,kDAAgD,CAAC;MACtD;MACA,MAAMI,eAAe,GAAG,IAAIZ,GAAG,CAAC,CAAC,GAAGD,sBAAsB,CAAC,CAACU,MAAM,CAAEhB,CAAC,IAAK,CAACY,sBAAsB,CAACK,GAAG,CAACjB,CAAC,CAAC,CAAC,CAAC;MAC1G,IAAImB,eAAe,CAACD,IAAI,GAAG,CAAC,EAAE;QAC1B,MAAM,IAAI7E,KAAK,qBAAAC,MAAA,CAAsB,CACjC,GAAG6E,eAAe,CACrB,kEAAgE,CAAC;MACtE;IACJ;EACJ;EACAC,cAAcA,CAAA,EAAG;IACb,OAAO,MAAM;EACjB;EACA,MAAMC,kBAAkBA,CAACzE,OAAO,EAAE0E,WAAW,EAAE;IAC3C,IAAI,OAAO1E,OAAO,CAACsB,OAAO,KAAK,QAAQ,EAAE;MACrC,OAAOtB,OAAO;IAClB;IACA,MAAM2E,uBAAuB,GAAG,MAAMC,OAAO,CAACC,GAAG,CAAC7E,OAAO,CAACsB,OAAO,CAACwD,GAAG,CAAC,MAAOpD,IAAI,IAAK;MAClF,IAAIA,IAAI,CAACW,IAAI,KAAK,WAAW,EAAE;QAC3B,OAAOX,IAAI;MACf;MACA,IAAIqD,QAAQ,GAAG,EAAE;MACjB,IAAI,OAAOrD,IAAI,CAACM,SAAS,KAAK,QAAQ,EAAE;QACpC+C,QAAQ,GAAGrD,IAAI,CAACM,SAAS;MAC7B,CAAC,MACI;QACD+C,QAAQ,GAAGrD,IAAI,CAACM,SAAS,CAACO,GAAG;MACjC;MACA,MAAMyC,yBAAyB,GAAGlH,cAAc,CAACiD,YAAY,CAACgE,QAAQ,CAAC;MACvE,MAAME,YAAY,GAAG,MAAMD,yBAAyB,CAACxE,MAAM,CAACkE,WAAW,CAAC;MACxE,IAAI,OAAOhD,IAAI,CAACM,SAAS,KAAK,QAAQ,IAAI,KAAK,IAAIN,IAAI,CAACM,SAAS,EAAE;QAC/D;QACAN,IAAI,CAACM,SAAS,CAACO,GAAG,GAAG0C,YAAY;MACrC,CAAC,MACI;QACD;QACAvD,IAAI,CAACM,SAAS,GAAGiD,YAAY;MACjC;MACA,OAAOvD,IAAI;IACf,CAAC,CAAC,CAAC;IACH;IACA1B,OAAO,CAACsB,OAAO,GAAGqD,uBAAuB;IACzC,OAAO3E,OAAO;EAClB;EACA,MAAMlB,cAAcA,CAACsB,MAAM,EAAE;IACzB,MAAM8E,SAAS,GAAG,MAAM,IAAI,CAACC,4BAA4B,CAAC/E,MAAM,CAAC;IACjE,IAAIQ,cAAc,GAAG,EAAE;IACvB,KAAK,MAAMgD,aAAa,IAAI,IAAI,CAACL,cAAc,EAAE;MAC7C;MACA,IAAIK,aAAa,YAAYtG,WAAW,EAAE;QACtCsD,cAAc,CAACiB,IAAI,CAAC,MAAM,IAAI,CAAC4C,kBAAkB,CAACb,aAAa,EAAEsB,SAAS,CAAC,CAAC;MAChF,CAAC,MACI;QACD,MAAMR,WAAW,GAAGd,aAAa,CAACtE,cAAc,CAAC8F,MAAM,CAAC,CAACC,GAAG,EAAExB,aAAa,KAAK;UAC5E,IAAI,EAAEA,aAAa,IAAIqB,SAAS,CAAC,IAC7B,EAAE/B,qBAAqB,CAACS,aAAa,CAAC,IAAIA,aAAa,CAACvE,QAAQ,CAAC,EAAE;YACnE,MAAM,IAAII,KAAK,sCAAAC,MAAA,CAAuCmE,aAAa,CAAClD,QAAQ,CAAC,CAAC,MAAI,CAAC;UACvF;UACA0E,GAAG,CAACxB,aAAa,CAAC,GAAGqB,SAAS,CAACrB,aAAa,CAAC;UAC7C,OAAOwB,GAAG;QACd,CAAC,EAAE,CAAC,CAAC,CAAC;QACN,MAAMrF,OAAO,GAAG,MAAM4D,aAAa,CAAC9E,cAAc,CAAC4F,WAAW,CAAC;QAC/D9D,cAAc,GAAGA,cAAc,CAAClB,MAAM,CAACM,OAAO,CAAC;MACnD;IACJ;IACA,OAAOY,cAAc;EACzB;EACA,MAAM0E,OAAOA,CAAClF,MAAM,EAAE;IAAA,IAAAmF,qBAAA;IAClB;IACA;IACA,MAAMC,iBAAiB,GAAG,IAAI,CAAClG,cAAc,CAAC8E,MAAM,CAAEqB,EAAE,IAAK,EAAEA,EAAE,IAAIrF,MAAM,CAAC,CAAC;IAC7E,MAAMsF,mBAAmB,GAAG;MACxB,KAAAH,qBAAA,GAAI,IAAI,CAACtB,gBAAgB,cAAAsB,qBAAA,cAAAA,qBAAA,GAAI,CAAC,CAAC,CAAC;MAChC,GAAGnF;IACP,CAAC;IACD,MAAMuF,UAAU,GAAG;MACf,GAAG,IAAI;MACPrG,cAAc,EAAEkG,iBAAiB;MACjCvB,gBAAgB,EAAEyB;IACtB,CAAC;IACD,OAAO,IAAIrC,kBAAkB,CAACsC,UAAU,CAAC;EAC7C;EACA;AACJ;AACA;EACI,OAAO5E,YAAYA,CAACC,QAAQ,EAAE;IAC1B,MAAMT,MAAM,GAAGzC,cAAc,CAACiD,YAAY,CAACC,QAAQ,CAAC;IACpD,MAAM4E,aAAa,GAAG,IAAIlD,0BAA0B,CAAC;MAAEnC;IAAO,CAAC,CAAC;IAChE,OAAO,IAAI,CAACsF,YAAY,CAAC,CAACD,aAAa,CAAC,CAAC;EAC7C;EACA;AACJ;AACA;AACA;AACA;AACA;EACI;EACA,OAAOC,YAAYA,CAACtC,cAAc,EAAE;IAChC,MAAMuC,iBAAiB,GAAGvC,cAAc,CAAC6B,MAAM,CAAC,CAACC,GAAG,EAAEzB,aAAa,KAAKyB,GAAG,CAAC3F,MAAM;IAClF;IACAkE,aAAa,YAAYP,kBAAkB,GACrCO,aAAa,CAACL,cAAc,GAC5B,CAACR,gCAAgC,CAACa,aAAa,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;IAC7D,MAAMmC,yBAAyB,GAAGxC,cAAc,CAAC6B,MAAM,CAAC,CAACC,GAAG,EAAEzB,aAAa;IAC3E;IACAA,aAAa,YAAYP,kBAAkB,GACrCjF,MAAM,CAACoF,MAAM,CAAC6B,GAAG,EAAEzB,aAAa,CAACK,gBAAgB,CAAC,GAClDoB,GAAG,EAAEjH,MAAM,CAAC4H,MAAM,CAAC,IAAI,CAAC,CAAC;IAC/B,MAAM1G,cAAc,GAAG,IAAIqE,GAAG,CAAC,CAAC;IAChC,KAAK,MAAMC,aAAa,IAAIkC,iBAAiB,EAAE;MAC3C;MACA,IAAIlC,aAAa,YAAYtG,WAAW,EACpC;MACJ,KAAK,MAAMuG,aAAa,IAAID,aAAa,CAACtE,cAAc,EAAE;QACtD,IAAIuE,aAAa,IAAIkC,yBAAyB,EAAE;UAC5C;QACJ;QACAzG,cAAc,CAACwE,GAAG,CAACD,aAAa,CAAC;MACrC;IACJ;IACA,OAAO,IAAIR,kBAAkB,CAAC;MAC1B/D,cAAc,EAAE,CAAC,GAAGA,cAAc,CAAC;MACnCiE,cAAc,EAAEuC,iBAAiB;MACjC7B,gBAAgB,EAAE8B;IACtB,CAAC,CAAC;EACN;EACA;EACA;EACA,OAAOE,kBAAkBA,CAAC1C,cAAc,EAAE;IACtC,OAAO,IAAI,CAACsC,YAAY,CAACtC,cAAc,CAAC;EAC5C;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}